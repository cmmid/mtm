[
  {
    "objectID": "04_ODEs_practical.html",
    "href": "04_ODEs_practical.html",
    "title": "04. Ordinary differential equations (ODEs): Practical",
    "section": "",
    "text": "The code below will solve the SI model with beta = 0.4 over 50 days with initial conditions S(0) = 99, I(0) = 1. Run the following lines including the plot() line to create a plot of the output\n\nlibrary(deSolve) # Load in the deSolve package. If the package is not installed, install using the install.packages() function\n# Define model function\n\nSI_model &lt;- function(times, state, parms){\n  ## Define variables\n  S &lt;- state[\"S\"]\n  I &lt;- state[\"I\"]\n  N &lt;- S + I\n  # Extract parameters\n  beta &lt;- parms[\"beta\"]\n  # Define differential equations\n  dS &lt;- - (beta * S * I) / N\n  dI &lt;- (beta * S * I) / N\n  res &lt;- list(c(dS, dI))\n  return(res)\n}\n\n# Define parameter values\nparameters &lt;- c(beta = 0.4)\n\n# Define time to solve equations\ntimes &lt;- seq(from = 0, to = 50, by = 1)\n\n# Define initial conditions\nN &lt;- 100\nI_0 &lt;- 1\nS_0 &lt;- N - I_0\nstate &lt;- c( S = S_0, I = I_0)\n\n# Solve equations\noutput_raw &lt;- ode(y = state, times = times, func = SI_model, parms = parameters,\n                  method = \"rk4\")\n# Convert to data frame for easy extraction of columns\noutput &lt;- as.data.frame(output_raw)\n\n# Plot output\npar( mfrow = c(1, 1))\nplot( output$time, output$S, type = \"l\", col = \"blue\", lwd = 2, ylim = c(0, N),\n      xlab = \"Time\", ylab = \"Number\")\nlines( output$time, output$I, lwd = 2, col = \"red\", type = \"l\")\nlegend(\"topright\", legend = c(\"Susceptible\", \"Infected\"),\n       lty = c(1, 1), col = c(\"blue\", \"red\"), lwd = 2, bty = \"n\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow, let’s solve a Susceptible-Infected-Recovered set of ordinary equations. There are now states; Susceptible, Infected, Recovered. Once infected people recover at a rate gamma = 0.1. The code for the model function ONLY is given below.\n\n# Define model function \nSIR_model &lt;- function(times, state, parms){\n  ## Define variables\n  S &lt;- state[\"S\"]\n  I &lt;- state[\"I\"]\n  R &lt;- state[\"R\"]\n  N &lt;- S + I + R\n  # Extract parameters\n  beta &lt;- parms[\"beta\"]\n  gamma &lt;- parms[\"gamma\"]\n  # Define differential equations\n  dS &lt;- - (beta * S * I) / N\n  dI &lt;- (beta * S * I) / N - gamma * I\n  dR &lt;- gamma * I\n  res &lt;- list(c(dS, dI, dR ))\n  return(res)\n}\n\n\n\n\n\n\n# Define parameter values\nparameters &lt;-\n\n# Define initial conditions\nN &lt;- 100\n\nstate &lt;-\n\n# Solve equations\noutput_raw &lt;- ode(y = state, times = times, func = SIR_model, parms = parameters,\n                  method = \"rk4\")\n# Convert to data frame for easy extraction of columns\noutput &lt;- as.data.frame(output_raw)\n\n# Plot output\npar(mfrow = c(1, 1))\nplot(output$time, output$S, type = \"l\", col = \"blue\", lwd = 2, ylim = c(0, N),\n     xlab = \"Time\", ylab = \"Number\")\nlines(output$time, output$I, lwd = 2, col = \"red\")\nlines(output$time, output$R, lwd = 2, col = \"green\")\nlegend( \"topright\", legend = c(\"Susceptible\", \"Infected\", \"Recovered\"),\n        lty = 1, col = c(\"blue\", \"red\", \"green\"), lwd = 2, bty = \"n\")\n\n\n\n\nHint: Recall that for an SIR model, the basic reproduction number, R_0 = beta / gamma\n\nparameters &lt;- \n\noutput_raw &lt;- ode(y = state, times = times, func = SIR_model, parms = parameters,\n                  method = \"rk4\")\n# Convert to data frame for easy extraction of columns\noutput &lt;- as.data.frame(output_raw)\n\n# plot results\npar(mfrow = c(1, 1))\nplot( output$time, output$S, type = \"l\", col = \"blue\", lwd = 2, ylim = c(0, N),\n      xlab = \"Time\", ylab = \"Number\")\nlines(output$time, output$I, lwd = 2, col = \"red\")\nlines(output$time, output$R, lwd = 2, col = \"green\")\nlegend(\"topright\", legend = c(\"Susceptible\", \"Infected\", \"Recovered\"),\n       lty = 1, col = c(\"blue\", \"red\", \"green\"), lwd = 2, bty = \"n\")\n\n\n\n\n\n\nThe code below has been written to solve a Susceptible-Exposed-Infected-Recovered model. In the model individuals can be in one of four states. Once infected, susceptible individuals move to the exposed class. Exposed individuals become infectious at a rate delta = 0.14.\n\n\n\n\n\n# Define model function \nSEIR_model &lt;- function(times, state, parms){\n  ## Define variables\n  S &lt;- state[1]\n  I &lt;- state[2]\n  R &lt;- state[3]\n  N &lt;- S + E + I + R\n  # Extract parameters\n  beta &lt;- parms[\"beta\"]\n  gamma &lt;- parms[\"gamma\"]\n  delta &lt;- parms[\"delta\"]\n  # Define differential equations\n  dS &lt;- - (beta * S * I ) / N\n  dE &lt;- (beta * S * I) / N - delta * E\n  dI &lt;- delta * E - gamma * I\n  dR &lt;- gamma * I\n  res &lt;- list(c(dS, dI, dR))\n  return(res)\n}\n\n# Define parameters  \nparameters &lt;- c( beta = 0.4, gamma = 0.1)\n\n# Define time to run model\ntimes &lt;- seq(from = 0, to = 50, by = 1)\n\n# Define initial conditions\nN &lt;- 100\nI_0 &lt;- 1\nS_0  &lt;- N - I_0\nR_0 &lt;- 0\nstate &lt;- c(S = S_0, E = 0, I = I_0, R = R_0)\n\n# Solve equations\noutput_raw &lt;- ode(y = state, times = times, func = SEIR_model, parms = parameters,\n                  method = \"rk4\")\n# Convert to data frame for easy extraction of columns\noutput &lt;- as.data.frame(output_raw)\n\n# plot results\npar(mfrow = c(1, 1))\nplot( output$time, output$S, type = \"l\", col = \"blue\", lwd = 2, ylim = c(0, N),\n      xlab = \"Time\", ylab = \"Number\")\nlines(output$time, output$I, lwd = 2, col = \"red\")\nlines(output$time, output$R, lwd = 2, col = \"green\")\nlines(output$time, output$E, lwd = 2, col = \"cyan\")\nlegend(\"topright\", legend =  c(\"Susceptible\", \"Exposed\", \"Infected\", \"Recovered\"),\n       lty = 1, col = c(\"blue\", \"red\", \"green\", \"cyan\"), lwd = 2, bty = \"n\")\n\n\n\n\n\n\n\nHere we assume that susceptible individuals are vaccinated at a rate v = 0.05. The vaccine is 100% effective, so once vaccinated, individuals cannot become infected. HINT: you will need to create a new class V, you can assume that the initial number of vaccinated individuals is 0.\nSolutions to this practical can be accessed here."
  },
  {
    "objectID": "04_ODEs_practical.html#solving-the-si-model-using-desolve",
    "href": "04_ODEs_practical.html#solving-the-si-model-using-desolve",
    "title": "04. Ordinary differential equations (ODEs): Practical",
    "section": "",
    "text": "The code below will solve the SI model with beta = 0.4 over 50 days with initial conditions S(0) = 99, I(0) = 1. Run the following lines including the plot() line to create a plot of the output\n\nlibrary(deSolve) # Load in the deSolve package. If the package is not installed, install using the install.packages() function\n# Define model function\n\nSI_model &lt;- function(times, state, parms){\n  ## Define variables\n  S &lt;- state[\"S\"]\n  I &lt;- state[\"I\"]\n  N &lt;- S + I\n  # Extract parameters\n  beta &lt;- parms[\"beta\"]\n  # Define differential equations\n  dS &lt;- - (beta * S * I) / N\n  dI &lt;- (beta * S * I) / N\n  res &lt;- list(c(dS, dI))\n  return(res)\n}\n\n# Define parameter values\nparameters &lt;- c(beta = 0.4)\n\n# Define time to solve equations\ntimes &lt;- seq(from = 0, to = 50, by = 1)\n\n# Define initial conditions\nN &lt;- 100\nI_0 &lt;- 1\nS_0 &lt;- N - I_0\nstate &lt;- c( S = S_0, I = I_0)\n\n# Solve equations\noutput_raw &lt;- ode(y = state, times = times, func = SI_model, parms = parameters,\n                  method = \"rk4\")\n# Convert to data frame for easy extraction of columns\noutput &lt;- as.data.frame(output_raw)\n\n# Plot output\npar( mfrow = c(1, 1))\nplot( output$time, output$S, type = \"l\", col = \"blue\", lwd = 2, ylim = c(0, N),\n      xlab = \"Time\", ylab = \"Number\")\nlines( output$time, output$I, lwd = 2, col = \"red\", type = \"l\")\nlegend(\"topright\", legend = c(\"Susceptible\", \"Infected\"),\n       lty = c(1, 1), col = c(\"blue\", \"red\"), lwd = 2, bty = \"n\")"
  },
  {
    "objectID": "04_ODEs_practical.html#solving-the-sir-model-using-desolve",
    "href": "04_ODEs_practical.html#solving-the-sir-model-using-desolve",
    "title": "04. Ordinary differential equations (ODEs): Practical",
    "section": "",
    "text": "Now, let’s solve a Susceptible-Infected-Recovered set of ordinary equations. There are now states; Susceptible, Infected, Recovered. Once infected people recover at a rate gamma = 0.1. The code for the model function ONLY is given below.\n\n# Define model function \nSIR_model &lt;- function(times, state, parms){\n  ## Define variables\n  S &lt;- state[\"S\"]\n  I &lt;- state[\"I\"]\n  R &lt;- state[\"R\"]\n  N &lt;- S + I + R\n  # Extract parameters\n  beta &lt;- parms[\"beta\"]\n  gamma &lt;- parms[\"gamma\"]\n  # Define differential equations\n  dS &lt;- - (beta * S * I) / N\n  dI &lt;- (beta * S * I) / N - gamma * I\n  dR &lt;- gamma * I\n  res &lt;- list(c(dS, dI, dR ))\n  return(res)\n}\n\n\n\n\n\n\n# Define parameter values\nparameters &lt;-\n\n# Define initial conditions\nN &lt;- 100\n\nstate &lt;-\n\n# Solve equations\noutput_raw &lt;- ode(y = state, times = times, func = SIR_model, parms = parameters,\n                  method = \"rk4\")\n# Convert to data frame for easy extraction of columns\noutput &lt;- as.data.frame(output_raw)\n\n# Plot output\npar(mfrow = c(1, 1))\nplot(output$time, output$S, type = \"l\", col = \"blue\", lwd = 2, ylim = c(0, N),\n     xlab = \"Time\", ylab = \"Number\")\nlines(output$time, output$I, lwd = 2, col = \"red\")\nlines(output$time, output$R, lwd = 2, col = \"green\")\nlegend( \"topright\", legend = c(\"Susceptible\", \"Infected\", \"Recovered\"),\n        lty = 1, col = c(\"blue\", \"red\", \"green\"), lwd = 2, bty = \"n\")\n\n\n\n\nHint: Recall that for an SIR model, the basic reproduction number, R_0 = beta / gamma\n\nparameters &lt;- \n\noutput_raw &lt;- ode(y = state, times = times, func = SIR_model, parms = parameters,\n                  method = \"rk4\")\n# Convert to data frame for easy extraction of columns\noutput &lt;- as.data.frame(output_raw)\n\n# plot results\npar(mfrow = c(1, 1))\nplot( output$time, output$S, type = \"l\", col = \"blue\", lwd = 2, ylim = c(0, N),\n      xlab = \"Time\", ylab = \"Number\")\nlines(output$time, output$I, lwd = 2, col = \"red\")\nlines(output$time, output$R, lwd = 2, col = \"green\")\nlegend(\"topright\", legend = c(\"Susceptible\", \"Infected\", \"Recovered\"),\n       lty = 1, col = c(\"blue\", \"red\", \"green\"), lwd = 2, bty = \"n\")"
  },
  {
    "objectID": "04_ODEs_practical.html#solving-the-seir-model-using-desolve",
    "href": "04_ODEs_practical.html#solving-the-seir-model-using-desolve",
    "title": "04. Ordinary differential equations (ODEs): Practical",
    "section": "",
    "text": "The code below has been written to solve a Susceptible-Exposed-Infected-Recovered model. In the model individuals can be in one of four states. Once infected, susceptible individuals move to the exposed class. Exposed individuals become infectious at a rate delta = 0.14.\n\n\n\n\n\n# Define model function \nSEIR_model &lt;- function(times, state, parms){\n  ## Define variables\n  S &lt;- state[1]\n  I &lt;- state[2]\n  R &lt;- state[3]\n  N &lt;- S + E + I + R\n  # Extract parameters\n  beta &lt;- parms[\"beta\"]\n  gamma &lt;- parms[\"gamma\"]\n  delta &lt;- parms[\"delta\"]\n  # Define differential equations\n  dS &lt;- - (beta * S * I ) / N\n  dE &lt;- (beta * S * I) / N - delta * E\n  dI &lt;- delta * E - gamma * I\n  dR &lt;- gamma * I\n  res &lt;- list(c(dS, dI, dR))\n  return(res)\n}\n\n# Define parameters  \nparameters &lt;- c( beta = 0.4, gamma = 0.1)\n\n# Define time to run model\ntimes &lt;- seq(from = 0, to = 50, by = 1)\n\n# Define initial conditions\nN &lt;- 100\nI_0 &lt;- 1\nS_0  &lt;- N - I_0\nR_0 &lt;- 0\nstate &lt;- c(S = S_0, E = 0, I = I_0, R = R_0)\n\n# Solve equations\noutput_raw &lt;- ode(y = state, times = times, func = SEIR_model, parms = parameters,\n                  method = \"rk4\")\n# Convert to data frame for easy extraction of columns\noutput &lt;- as.data.frame(output_raw)\n\n# plot results\npar(mfrow = c(1, 1))\nplot( output$time, output$S, type = \"l\", col = \"blue\", lwd = 2, ylim = c(0, N),\n      xlab = \"Time\", ylab = \"Number\")\nlines(output$time, output$I, lwd = 2, col = \"red\")\nlines(output$time, output$R, lwd = 2, col = \"green\")\nlines(output$time, output$E, lwd = 2, col = \"cyan\")\nlegend(\"topright\", legend =  c(\"Susceptible\", \"Exposed\", \"Infected\", \"Recovered\"),\n       lty = 1, col = c(\"blue\", \"red\", \"green\", \"cyan\"), lwd = 2, bty = \"n\")\n\n\n\n\n\n\n\nHere we assume that susceptible individuals are vaccinated at a rate v = 0.05. The vaccine is 100% effective, so once vaccinated, individuals cannot become infected. HINT: you will need to create a new class V, you can assume that the initial number of vaccinated individuals is 0.\nSolutions to this practical can be accessed here."
  },
  {
    "objectID": "06_SensitivitySampling_solutions.html",
    "href": "06_SensitivitySampling_solutions.html",
    "title": "06. Sensitivity Analysis & Sampling: Practical",
    "section": "",
    "text": "Click here to return to the practical."
  },
  {
    "objectID": "06_SensitivitySampling_solutions.html#one-way-sensitivity-analyses",
    "href": "06_SensitivitySampling_solutions.html#one-way-sensitivity-analyses",
    "title": "06. Sensitivity Analysis & Sampling: Practical",
    "section": "(1) One-way sensitivity analyses",
    "text": "(1) One-way sensitivity analyses\nFirst, let’s run an ODE model. Download and open up the SIRmodel.R\n\n(a) Which functions are in here?\nAnswer: solveODE() and SIR_model()\n\n\n(b) What are the arguments of the first function?\nAnswer: (1) the parameter values lists, (2) Argument to plot everything, (3) number of row to plot (4) number of cols to plot\n\n\n(c) What is the output of the first function?\nAnswer: maximum prevalence through the epidemic\n# First let's clear our workspace, remove plots and load the libraries we need\nrm(list=ls())\ndev.off()\nlibrary(deSolve)\nlibrary(ggplot2)\n\n# Let's read in these functions so we have them to hand\nsource(\"SIRmodel.R\")\n\n# Let's choose a beta value of 0.4 and a gamma value of 0.2\nmax.prevalence &lt;- solveODE(parameters &lt;- c(beta = 0.4, gamma = 0.2))\nprint(max.prevalence)\n\n# Now let's look at the effect of the maximum prevalence of the epidemic across \n# gamma = 0.1 -1.0 (increment on 0.1)\ngamma.vec &lt;- seq(0.1, 1.0, by = 0.1)\n\n# initialise max/prevalence container\nmax.prevalence &lt;- vector()\n\n# Add in a loop to make this happen\nfor (gamma.val in gamma.vec){\n  mp = solveODE(parameters = c(beta = 0.4, gamma = gamma.val),\n                                         plot.all.results = FALSE)\n  max.prevalence = c(max.prevalence, mp)\n}\n\n# Now we have our max.prevalence, we need to plot this against our \n# infectiousness duration - plot max.prevalence as a function of the \n# \\*infectiousness duration\\*\n\npar(new=FALSE)\npar(mfrow=c(1,1))\n\nplot(1/gamma.vec, \n     max.prevalence, \n     type = \"b\",\n     xlab = \"Infectiousness Duration (days)\",\n     ylab = \"Maximum Prevalence\",\n     main = \"One-way uncertainty analysis\")\n\n# Now try to increase the resolution of gamma to get a better idea of the \n# relationship but remember to clear max.prevalence first!\n\n# You could try and replace gamma.vec = seq(0.1, 1.0, by = 0.1) with\ninf.duration = 1:10\ngamma.vec = 1/inf.duration\n\n\n(d) Describe in words the qualitative relationship\nAnswer: There is no epidemic until the infectiousness duration is &gt; 2 days (R0 &gt; 1) after that there is a linear increase in the maximum prevalence until gamma = 6, then there is a diminishing increase in the maximum prevalence."
  },
  {
    "objectID": "06_SensitivitySampling_solutions.html#monte-carlo-sampling",
    "href": "06_SensitivitySampling_solutions.html#monte-carlo-sampling",
    "title": "06. Sensitivity Analysis & Sampling: Practical",
    "section": "(2) Monte Carlo Sampling",
    "text": "(2) Monte Carlo Sampling\nNow suppose that we have a previous epidemiological study that suggested that R0 has a mean value of 5, but uncertainty within the range of [-1, +1]. However, we still don’t know whether the infectiousness period is 1 day or 10 days. We will now use the functions in SIRmodel_R0.R to make a similar plot as above, but this time, incorporate the uncertainty of R0 for each discrete value of gamma. We’re going to first use a direct Monte Carlo Sampling method.\n# Read in our set of functions in SIRmodel_R0.R\nsource(\"SIRmodel_R0.R\")\n\n# First, let's set a fixed seed for the random number generator\n# this will allow us to run the code again and retrieve the same 'simulation'\nset.seed(2019)\n\n# Now, draw R0 1,000 times from a suitable distribution (e.g. normal)\nr0.all = rnorm(1000, 5, 0.5)\nsize.df = length(r0.all) * length(gamma.vec)\n\n# initialise max.prevalence again, this time it needs to be a dataframe \n# or a matrix\nmax.prevalence = data.frame(r0.value = vector(mode = \"numeric\", \n                                            length = size.df),\n                            gamma = vector(mode = \"numeric\", \n                                           length = size.df),\n                            max.prev = vector(mode = \"numeric\", \n                                              length = size.df))\nindex = 0\n\n# create a loop over each of these R0 values in turn\nfor (r0.val in r0.all){\n# create a loop over each of these Gamma values in turn\n    for (gamma.val in gamma.vec){\n    index = index + 1\n    mp = solveODE_2(parameters = c(R0 = r0.val, gamma = gamma.val))\n    max.prevalence[index, \"r0.value\"] = r0.val\n    max.prevalence[index, \"gamma\"] = gamma.val\n    max.prevalence[index, \"max.prev\"] = mp\n    }\n}\n\n# Take a look at max.prevalence by using the 'head() function\nhead(max.prevalence)\n\n(e) How have we saved the output?\nAnswer: using ‘long’ formatting – see the ggplot pre-course material\nNow plot this output using the R function MCplot() in SIRmodel_R0.R\nMCplot(max.prevalence)\n\n\n(f) What conclusions can you draw from the plot?\nAnswer: Increasing the rate of recovery reduces the max prevalence. However, the uncertainty in R0 has a larger impact on the maximum prevalence than infectious duration. In fact, until the infectiousness duration decreases below 4 days, the value of R0 is the important parameter in determining prevalence."
  },
  {
    "objectID": "06_SensitivitySampling_solutions.html#latin-hypercube-sampling-lhs-vs-monte-carlo-sampling",
    "href": "06_SensitivitySampling_solutions.html#latin-hypercube-sampling-lhs-vs-monte-carlo-sampling",
    "title": "06. Sensitivity Analysis & Sampling: Practical",
    "section": "(3) Latin hypercube sampling (LHS) vs Monte Carlo Sampling",
    "text": "(3) Latin hypercube sampling (LHS) vs Monte Carlo Sampling\n# First let's load in the library we'll need for later\nlibrary(lhs)\n\n# We're going to first sample directly from a full distribution uniform \n# distribution from 0 to 1. How many samples will we need to take? \n# Let's try a few options and see how well they do\n\npar(mfrow=c(3,2))\nhist(rnorm(10))\nhist(rnorm(100))\nhist(rnorm(1000))\nhist(rnorm(10000))\nhist(rnorm(20000))\n\n# Now let's plot the sample sizes against the variance of the sample distribution\n\nplot(\n    c(10,100,1000,10000,50000,100000),\n    c(var(rnorm(10)), var(rnorm(100)), var(rnorm(1000)), var(rnorm(10000)), \n      var(rnorm(50000)), var(rnorm(100000))),\n    ylab = \"variance\", main = \"Variance of sampled normal\"\n    )\nabline(h = 1)\n\n# Let's now use 100 samples to see the difference between a Monte Carlo \n# sampling and a LHS sampling approach.\n# Pick some small number of samples\nn &lt;- 100\n\n# First we're going to sample 100 times from a random sample\nmc_unif &lt;- runif(n)\n\n# 100 lh samples across 1 parameter\nlatin_unif &lt;- randomLHS(n, 1)\n\n# plot these two distribution\ndev.off()\npar(mfrow=c(3,2))\nhist(mc_unif)\nhist(latin_unif)\n\n# You can see how the Latin Hypercube does a great job of sampling evenly \n# across the distribution. Let's now sample from a Normal distribution using \n# a random monte carlo sample across the whole distribution.\nmc_norm &lt;- rnorm(n, mean = 0, sd = 1)\n\n# How do we sample using an LHS? We use the previous numbers generated from the \n# uniform LHS to draw samples from the Normal using the Inverse Cumulative \n# Sampling.\nlatin_norm &lt;- qnorm(latin_unif, mean = 0, sd = 1)\n\n# plot these two normal distributions\nhist(mc_norm)\nhist(latin_norm)\n\n# the latin hypercube sample looks much better! Why does this work?\n# first let's look at the norm probability distibution\nx &lt;- seq(-6, 6, by = 0.1) # random variable X\nnormdens &lt;- dnorm(x, mean = 0, sd = 1) # prob distribution, f(X)\nnormcumul &lt;- pnorm(x, mean = 0, sd = 1) # cumulative distribution, F(X)\n\nplot(x, normdens, \"l\")\nplot(x, normcumul, \"l\")\n\n# Most of the density is in the middle range of values (-1 to 1).\n\n# So we want a method to sample from this more often than the other areas in \n# the distribution. Specifically, we want to sample values from X proportionally \n# to the probability of those values occuring. Let's generate some samples \n# between 0-1. These can be values on our Y-axis. Then, if we ask what is the \n# value of the cumulative distribution that corresponds to these uniform \n# values we are taking the inverse for illustration let's just choose 10 points.\nex_latin &lt;- randomLHS(10, 1)\n\n# which X values are given by using these as the Y value (denoted by \"X\"s)?\nabline(h = ex_latin, col = \"red\")\npoints(qnorm(ex_latin, mean = 0, sd = 1), y=rep(0,10), pc = \"x\")\n\n# You can see that the samples are clustered around the middle: in areas of X \n# with higher density, the gradient of the cumluative distribution (F(X)) will \n# be very steep, causing more values between 0 and 1 to map to this range of X \n# with high density That is, F\\^{-1}(R) = X where R is a uniform random number \n# between 0 and 1.\n\n# So, you can sample from any distribution whose cumluative function is \n# 'invertable' by plugging in uniform random numbers to the inverse cumulative \n# function of your new distribution. For more information check out: \n# https://en.wikipedia.org/wiki/Inverse_transform_sampling\n\n# Likewise, to perform LHS on a uni- or mulitvariate non-uniform distribution, \n# we can transform our LHS samples from a uniform distribution as above."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Your course organisers are Oliver Brady, Nicholas Davies, and Yang Liu.\nYour course administrator is .\nOther lectures and demonstrators include ."
  },
  {
    "objectID": "about.html#who-we-are",
    "href": "about.html#who-we-are",
    "title": "About",
    "section": "",
    "text": "Your course organisers are Oliver Brady, Nicholas Davies, and Yang Liu.\nYour course administrator is .\nOther lectures and demonstrators include ."
  },
  {
    "objectID": "about.html#who-you-are-scope-of-the-course",
    "href": "about.html#who-you-are-scope-of-the-course",
    "title": "About",
    "section": "Who you are (= scope of the course)",
    "text": "Who you are (= scope of the course)\n\nIndividuals with some exposure to the theory and use of infectious disease modelling & like to start coding their own models using R OR\nIndividuals who know some R but do not have experience using R to code infectious disease models OR\nIndividuals who will be conducting research using infectious disease models in R OR\nIndividuals who want a deeper understanding of techniques for implementing models."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Content overview",
    "section": "",
    "text": "Pre-course material - please review before the short course\nSession 1 - Introduction: Slides\nSession 2 - Types of models: Slides\nSession 3 - Discrete time deterministic models: Slides, Practical, Solutions\nSession 4 - Ordinary differential equations: Slides, Practical, Solutions\nSession 5 - Metapopulations with ODEs: Slides, Practical, Solutions\nSession 6 - Sensitivity analysis & sampling: Slides, Practical, Solutions"
  },
  {
    "objectID": "timetable.html",
    "href": "timetable.html",
    "title": "Modern Techniques in Modelling",
    "section": "",
    "text": "Date\nTime\nSession\nTitle\nLead\n\n\n\n\n2024/09/09\n10.00-10.30\n01\nIntro/ overview\n\n\n\n\n10.30-11.00\n02\nDifferent types of models\n\n\n\n\n11.00-11.30\n\nBREAK\n\n\n\n\n11.30-12.30\n03\nDiscrete time deterministic model, different equations/ Euler\nAlexis Robert\n\n\n\n12.30-13.30\n\nLUNCH\n\n\n\n\n13.30-14.30\n03\nDiscrete time deterministic model, different equations/ Euler (continued)\nAlexis Robert\n\n\n\n14.30-15.00\n\nBREAK\n\n\n\n\n15.00-16.00\n04\nODE models\nNick Davies"
  },
  {
    "objectID": "timetable.html#day-1",
    "href": "timetable.html#day-1",
    "title": "Modern Techniques in Modelling",
    "section": "",
    "text": "Date\nTime\nSession\nTitle\nLead\n\n\n\n\n2024/09/09\n10.00-10.30\n01\nIntro/ overview\n\n\n\n\n10.30-11.00\n02\nDifferent types of models\n\n\n\n\n11.00-11.30\n\nBREAK\n\n\n\n\n11.30-12.30\n03\nDiscrete time deterministic model, different equations/ Euler\nAlexis Robert\n\n\n\n12.30-13.30\n\nLUNCH\n\n\n\n\n13.30-14.30\n03\nDiscrete time deterministic model, different equations/ Euler (continued)\nAlexis Robert\n\n\n\n14.30-15.00\n\nBREAK\n\n\n\n\n15.00-16.00\n04\nODE models\nNick Davies"
  },
  {
    "objectID": "timetable.html#day-2",
    "href": "timetable.html#day-2",
    "title": "Modern Techniques in Modelling",
    "section": "Day 2",
    "text": "Day 2\n\n\n\n\n\n\n\n\n\n\nDate\nTime\nSession\nTitle\nLead\n\n\n\n\n2024/09/10\n10.00-11.30\n04\nODE models (continued)\nNick Davies\n\n\n\n11.30-12.00\n\nBREAK\n\n\n\n\n12.00-12.45\n05\nODE with deSolve in a metapopulation model\nNick Davies\n\n\n\n12.45-13.30\n\nLUNCH\n\n\n\n\n13.30-15.00\n06\nSimulation, sensitivity, and sampling\nYang Liu\n\n\n\n15.00-15.30\n\nBREAK\n\n\n\n\n15.30-16.00\n07\nPresentation of modelling problem\nOliver Brady"
  },
  {
    "objectID": "timetable.html#day-3",
    "href": "timetable.html#day-3",
    "title": "Modern Techniques in Modelling",
    "section": "Day 3",
    "text": "Day 3"
  },
  {
    "objectID": "04_ODEs_solutions.html",
    "href": "04_ODEs_solutions.html",
    "title": "04. Ordinary differential equations (ODEs): Solutions",
    "section": "",
    "text": "Click here to return to the practical.\n\n\nThe code below will solve the SI model with beta = 0.4 over 50 days with initial conditions S(0) = 99, I(0) = 1. Run the following lines including the plot() line to create a plot of the output\n\nlibrary(deSolve) # Load in the deSolve package. If the package is not installed, install using the install.packages() function\n# Define model function\n\nSI_model &lt;- function(times, state, parms){\n  ## Define variables\n  S &lt;- state[\"S\"]\n  I &lt;- state[\"I\"]\n  N &lt;- S + I\n  # Extract parameters\n  beta &lt;- parms[\"beta\"]\n  # Define differential equations\n  dS &lt;- - (beta * S * I) / N\n  dI &lt;- (beta * S * I) / N\n  res &lt;- list(c(dS, dI))\n  return(res)\n}\n\n# Define parameter values\nparameters &lt;- c(beta = 0.4)\n\n# Define time to solve equations\ntimes &lt;- seq(from = 0, to = 50, by = 1)\n\n# Define initial conditions\nN &lt;- 100\nI_0 &lt;- 1\nS_0 &lt;- N - I_0\nstate &lt;- c( S = S_0, I = I_0)\n\n# Solve equations\noutput_raw &lt;- ode(y = state, times = times, func = SI_model, parms = parameters,\n                  method = \"rk4\")\n# Convert to data frame for easy extraction of columns\noutput &lt;- as.data.frame(output_raw)\n\n# Plot output\npar( mfrow = c(1, 1))\nplot( output$time, output$S, type = \"l\", col = \"blue\", lwd = 2, ylim = c(0, N),\n      xlab = \"Time\", ylab = \"Number\")\nlines( output$time, output$I, lwd = 2, col = \"red\", type = \"l\")\nlegend(\"topright\", legend = c(\"Susceptible\", \"Infected\"),\n       lty = c(1, 1), col = c(\"blue\", \"red\"), lwd = 2, bty = \"n\")\n\n\n\n\n\n\n\n\n\n\n\n\nAnswer: The number of infecteds as a higher intercept but same asymptote\n\n\n\nAnswer: The time steps of the model solution\n\n\n\nAnswer: Solution becomes less precise.\n\n\n\n\n\nNow, let’s solve a Susceptible-Infected-Recovered set of ordinary equations. There are now states; Susceptible, Infected, Recovered. Once infected people recover at a rate gamma = 0.1. The code for the model function ONLY is given below.\n\n# Define model function \nSIR_model &lt;- function(times, state, parms){\n  ## Define variables\n  S &lt;- state[\"S\"]\n  I &lt;- state[\"I\"]\n  R &lt;- state[\"R\"]\n  N &lt;- S + I + R\n  # Extract parameters\n  beta &lt;- parms[\"beta\"]\n  gamma &lt;- parms[\"gamma\"]\n  # Define differential equations\n  dS &lt;- - (beta * S * I) / N\n  dI &lt;- (beta * S * I) / N - gamma * I\n  dR &lt;- gamma * I\n  res &lt;- list(c(dS, dI, dR ))\n  return(res)\n}\n\n\n\n\n\n\n# Define parameter values\nparameters &lt;- c(beta = 0.4, gamma = 0.1)\n\n# Define initial conditions\nN &lt;- 100\nI_0 &lt;- 1\nS_0 &lt;- N - I_0\nR_0 &lt;- 0\nstate &lt;- c(S = S_0, I = I_0, R = R_0)\n\n# Solve equations\noutput_raw &lt;- ode(y = state, times = times, func = SIR_model, parms = parameters,\n                  method = \"rk4\")\n# Convert to data frame for easy extraction of columns\noutput &lt;- as.data.frame(output_raw)\n\n# Plot output\npar(mfrow = c(1, 1))\nplot(output$time, output$S, type = \"l\", col = \"blue\", lwd = 2, ylim = c(0, N),\n     xlab = \"Time\", ylab = \"Number\")\nlines(output$time, output$I, lwd = 2, col = \"red\")\nlines(output$time, output$R, lwd = 2, col = \"green\")\nlegend( \"topright\", legend = c(\"Susceptible\", \"Infected\", \"Recovered\"),\n        lty = 1, col = c(\"blue\", \"red\", \"green\"), lwd = 2, bty = \"n\")\n\n\n\n\n\n\n\n\n\n\n\nHint: Recall that for an SIR model, the basic reproduction number, R_0 = beta / gamma\nAnswer: The epidemic does not take off\n\nparameters &lt;- c(beta = 0.09, gamma = 0.1)\n\noutput_raw &lt;- ode(y = state, times = times, func = SIR_model, parms = parameters,\n                  method = \"rk4\")\n# Convert to data frame for easy extraction of columns\noutput &lt;- as.data.frame(output_raw)\n\n# plot results\npar(mfrow = c(1, 1))\nplot( output$time, output$S, type = \"l\", col = \"blue\", lwd = 2, ylim = c(0, N),\n      xlab = \"Time\", ylab = \"Number\")\nlines(output$time, output$I, lwd = 2, col = \"red\")\nlines(output$time, output$R, lwd = 2, col = \"green\")\nlegend(\"topright\", legend = c(\"Susceptible\", \"Infected\", \"Recovered\"),\n       lty = 1, col = c(\"blue\", \"red\", \"green\"), lwd = 2, bty = \"n\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe code below has been written to solve a Susceptible-Exposed-Infected-Recovered model. In the model individuals can be in one of four states. Once infected, susceptible individuals move to the exposed class. Exposed individuals become infectious at a rate delta = 0.14.\n\n\n\n\n\n# Define model function \nSEIR_model &lt;- function(times, state, parms){\n  ## Define variables\n  S &lt;- state[1]\n  E &lt;- state[2]\n  I &lt;- state[3]\n  R &lt;- state[4]\n  N &lt;- S + E + I + R\n  # Extract parameters\n  beta &lt;- parms[\"beta\"]\n  gamma &lt;- parms[\"gamma\"]\n  delta &lt;- parms[\"delta\"]\n  # Define differential equations\n  dS &lt;- - (beta * S * I ) / N\n  dE &lt;- (beta * S * I) / N - delta * E\n  dI &lt;- delta * E - gamma * I\n  dR &lt;- gamma * I\n  res &lt;- list(c(dS, dE, dI, dR))\n  return(res)\n}\n\n# Define parameters  \nparameters &lt;- c( beta = 0.4, gamma = 0.1, delta = 0.14)\n\n# Define time to run model\ntimes &lt;- seq(from = 0, to = 50, by = 1)\n\n# Define initial conditions\nN &lt;- 100\nI_0 &lt;- 1\nS_0  &lt;- N - I_0\nR_0 &lt;- 0\nstate &lt;- c(S = S_0, E = 0, I = I_0, R = R_0)\n\n# Solve equations\noutput_raw &lt;- ode(y = state, times = times, func = SEIR_model, parms = parameters,\n                  method = \"rk4\")\n# Convert to data frame for easy extraction of columns\noutput &lt;- as.data.frame(output_raw)\n\n# plot results\npar(mfrow = c(1, 1))\nplot( output$time, output$S, type = \"l\", col = \"blue\", lwd = 2, ylim = c(0, N),\n      xlab = \"Time\", ylab = \"Number\")\nlines(output$time, output$I, lwd = 2, col = \"red\")\nlines(output$time, output$R, lwd = 2, col = \"green\")\nlines(output$time, output$E, lwd = 2, col = \"cyan\")\nlegend(\"topright\", legend =  c(\"Susceptible\", \"Exposed\", \"Infected\", \"Recovered\"),\n       lty = 1, col = c(\"blue\", \"red\", \"green\", \"cyan\"), lwd = 2, bty = \"n\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHere we assume that susceptible individuals are vaccinated at a rate v = 0.05. The vaccine is 100% effective, so once vaccinated, individuals cannot become infected. HINT: you will need to create a new class V, you can assume that the initial number of vaccinated individuals is 0.\n\n# Define model function \nSIRV_model &lt;- function(times, state, parms){\n  ## Define variables\n  S &lt;- state[\"S\"]\n  I &lt;- state[\"I\"]\n  R &lt;- state[\"R\"]\n  V &lt;- state[\"V\"]\n  N &lt;- S + I + R + V\n  # Extract parameters\n  beta &lt;- parms[\"beta\"]\n  gamma &lt;- parms[\"gamma\"]\n  v &lt;- parms[\"v\"]\n  # Define differential equations\n  dS &lt;- - (beta * S * I) / N - v * S\n  dI &lt;- (beta * S * I) / N - gamma * I\n  dR &lt;- gamma * I\n  dV &lt;- v * S\n  res &lt;- list(c(dS, dI, dR, dV))\n  return(res)\n}\n\n\n# Define parameter values\nparameters &lt;- c(beta = 0.4, gamma = 0.1, v = 0.05)\n\n# Define initial conditions\nN &lt;- 100\nI_0 &lt;- 1\nS_0 &lt;- N - I_0\nR_0 &lt;- 0\nV_0 &lt;- 0\nstate &lt;- c(S = S_0, I = I_0, R = R_0, V = V_0)\n\n# Solve equations\noutput_raw &lt;- ode(y = state, times = times, func = SIRV_model, parms = parameters,\n                  method = \"rk4\")\n# Convert to data frame for easy extraction of columns\noutput &lt;- as.data.frame(output_raw)\n\n# Plot results\npar(mfrow = c(1, 1))\nplot(output$time, output$S, type = \"l\", col = \"blue\", lwd = 2, ylim = c(0, N),\n     xlab = \"Time\", ylab = \"Number\")\nlines(output$time, output$I, lwd = 2, col = \"green\")\nlines(output$time, output$R, lwd = 2, col = \"red\")\nlines(output$time, output$V, lwd = 2, col = \"purple\")\nlegend( \"topright\", legend = c(\"Susceptible\", \"Infected\", \"Recovered\", \"Vaccinated\"),\n        lty=1, col = c(\"blue\", \"red\", \"green\", 'purple'), lwd = 2, bty = \"n\")"
  },
  {
    "objectID": "04_ODEs_solutions.html#solving-the-si-model-using-desolve",
    "href": "04_ODEs_solutions.html#solving-the-si-model-using-desolve",
    "title": "04. Ordinary differential equations (ODEs): Solutions",
    "section": "",
    "text": "The code below will solve the SI model with beta = 0.4 over 50 days with initial conditions S(0) = 99, I(0) = 1. Run the following lines including the plot() line to create a plot of the output\n\nlibrary(deSolve) # Load in the deSolve package. If the package is not installed, install using the install.packages() function\n# Define model function\n\nSI_model &lt;- function(times, state, parms){\n  ## Define variables\n  S &lt;- state[\"S\"]\n  I &lt;- state[\"I\"]\n  N &lt;- S + I\n  # Extract parameters\n  beta &lt;- parms[\"beta\"]\n  # Define differential equations\n  dS &lt;- - (beta * S * I) / N\n  dI &lt;- (beta * S * I) / N\n  res &lt;- list(c(dS, dI))\n  return(res)\n}\n\n# Define parameter values\nparameters &lt;- c(beta = 0.4)\n\n# Define time to solve equations\ntimes &lt;- seq(from = 0, to = 50, by = 1)\n\n# Define initial conditions\nN &lt;- 100\nI_0 &lt;- 1\nS_0 &lt;- N - I_0\nstate &lt;- c( S = S_0, I = I_0)\n\n# Solve equations\noutput_raw &lt;- ode(y = state, times = times, func = SI_model, parms = parameters,\n                  method = \"rk4\")\n# Convert to data frame for easy extraction of columns\noutput &lt;- as.data.frame(output_raw)\n\n# Plot output\npar( mfrow = c(1, 1))\nplot( output$time, output$S, type = \"l\", col = \"blue\", lwd = 2, ylim = c(0, N),\n      xlab = \"Time\", ylab = \"Number\")\nlines( output$time, output$I, lwd = 2, col = \"red\", type = \"l\")\nlegend(\"topright\", legend = c(\"Susceptible\", \"Infected\"),\n       lty = c(1, 1), col = c(\"blue\", \"red\"), lwd = 2, bty = \"n\")\n\n\n\n\n\n\n\n\n\n\n\n\nAnswer: The number of infecteds as a higher intercept but same asymptote\n\n\n\nAnswer: The time steps of the model solution\n\n\n\nAnswer: Solution becomes less precise."
  },
  {
    "objectID": "04_ODEs_solutions.html#solving-the-sir-model-using-desolve",
    "href": "04_ODEs_solutions.html#solving-the-sir-model-using-desolve",
    "title": "04. Ordinary differential equations (ODEs): Solutions",
    "section": "",
    "text": "Now, let’s solve a Susceptible-Infected-Recovered set of ordinary equations. There are now states; Susceptible, Infected, Recovered. Once infected people recover at a rate gamma = 0.1. The code for the model function ONLY is given below.\n\n# Define model function \nSIR_model &lt;- function(times, state, parms){\n  ## Define variables\n  S &lt;- state[\"S\"]\n  I &lt;- state[\"I\"]\n  R &lt;- state[\"R\"]\n  N &lt;- S + I + R\n  # Extract parameters\n  beta &lt;- parms[\"beta\"]\n  gamma &lt;- parms[\"gamma\"]\n  # Define differential equations\n  dS &lt;- - (beta * S * I) / N\n  dI &lt;- (beta * S * I) / N - gamma * I\n  dR &lt;- gamma * I\n  res &lt;- list(c(dS, dI, dR ))\n  return(res)\n}\n\n\n\n\n\n\n# Define parameter values\nparameters &lt;- c(beta = 0.4, gamma = 0.1)\n\n# Define initial conditions\nN &lt;- 100\nI_0 &lt;- 1\nS_0 &lt;- N - I_0\nR_0 &lt;- 0\nstate &lt;- c(S = S_0, I = I_0, R = R_0)\n\n# Solve equations\noutput_raw &lt;- ode(y = state, times = times, func = SIR_model, parms = parameters,\n                  method = \"rk4\")\n# Convert to data frame for easy extraction of columns\noutput &lt;- as.data.frame(output_raw)\n\n# Plot output\npar(mfrow = c(1, 1))\nplot(output$time, output$S, type = \"l\", col = \"blue\", lwd = 2, ylim = c(0, N),\n     xlab = \"Time\", ylab = \"Number\")\nlines(output$time, output$I, lwd = 2, col = \"red\")\nlines(output$time, output$R, lwd = 2, col = \"green\")\nlegend( \"topright\", legend = c(\"Susceptible\", \"Infected\", \"Recovered\"),\n        lty = 1, col = c(\"blue\", \"red\", \"green\"), lwd = 2, bty = \"n\")\n\n\n\n\n\n\n\n\n\n\n\nHint: Recall that for an SIR model, the basic reproduction number, R_0 = beta / gamma\nAnswer: The epidemic does not take off\n\nparameters &lt;- c(beta = 0.09, gamma = 0.1)\n\noutput_raw &lt;- ode(y = state, times = times, func = SIR_model, parms = parameters,\n                  method = \"rk4\")\n# Convert to data frame for easy extraction of columns\noutput &lt;- as.data.frame(output_raw)\n\n# plot results\npar(mfrow = c(1, 1))\nplot( output$time, output$S, type = \"l\", col = \"blue\", lwd = 2, ylim = c(0, N),\n      xlab = \"Time\", ylab = \"Number\")\nlines(output$time, output$I, lwd = 2, col = \"red\")\nlines(output$time, output$R, lwd = 2, col = \"green\")\nlegend(\"topright\", legend = c(\"Susceptible\", \"Infected\", \"Recovered\"),\n       lty = 1, col = c(\"blue\", \"red\", \"green\"), lwd = 2, bty = \"n\")"
  },
  {
    "objectID": "04_ODEs_solutions.html#solving-the-seir-model-using-desolve",
    "href": "04_ODEs_solutions.html#solving-the-seir-model-using-desolve",
    "title": "04. Ordinary differential equations (ODEs): Solutions",
    "section": "",
    "text": "The code below has been written to solve a Susceptible-Exposed-Infected-Recovered model. In the model individuals can be in one of four states. Once infected, susceptible individuals move to the exposed class. Exposed individuals become infectious at a rate delta = 0.14.\n\n\n\n\n\n# Define model function \nSEIR_model &lt;- function(times, state, parms){\n  ## Define variables\n  S &lt;- state[1]\n  E &lt;- state[2]\n  I &lt;- state[3]\n  R &lt;- state[4]\n  N &lt;- S + E + I + R\n  # Extract parameters\n  beta &lt;- parms[\"beta\"]\n  gamma &lt;- parms[\"gamma\"]\n  delta &lt;- parms[\"delta\"]\n  # Define differential equations\n  dS &lt;- - (beta * S * I ) / N\n  dE &lt;- (beta * S * I) / N - delta * E\n  dI &lt;- delta * E - gamma * I\n  dR &lt;- gamma * I\n  res &lt;- list(c(dS, dE, dI, dR))\n  return(res)\n}\n\n# Define parameters  \nparameters &lt;- c( beta = 0.4, gamma = 0.1, delta = 0.14)\n\n# Define time to run model\ntimes &lt;- seq(from = 0, to = 50, by = 1)\n\n# Define initial conditions\nN &lt;- 100\nI_0 &lt;- 1\nS_0  &lt;- N - I_0\nR_0 &lt;- 0\nstate &lt;- c(S = S_0, E = 0, I = I_0, R = R_0)\n\n# Solve equations\noutput_raw &lt;- ode(y = state, times = times, func = SEIR_model, parms = parameters,\n                  method = \"rk4\")\n# Convert to data frame for easy extraction of columns\noutput &lt;- as.data.frame(output_raw)\n\n# plot results\npar(mfrow = c(1, 1))\nplot( output$time, output$S, type = \"l\", col = \"blue\", lwd = 2, ylim = c(0, N),\n      xlab = \"Time\", ylab = \"Number\")\nlines(output$time, output$I, lwd = 2, col = \"red\")\nlines(output$time, output$R, lwd = 2, col = \"green\")\nlines(output$time, output$E, lwd = 2, col = \"cyan\")\nlegend(\"topright\", legend =  c(\"Susceptible\", \"Exposed\", \"Infected\", \"Recovered\"),\n       lty = 1, col = c(\"blue\", \"red\", \"green\", \"cyan\"), lwd = 2, bty = \"n\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHere we assume that susceptible individuals are vaccinated at a rate v = 0.05. The vaccine is 100% effective, so once vaccinated, individuals cannot become infected. HINT: you will need to create a new class V, you can assume that the initial number of vaccinated individuals is 0.\n\n# Define model function \nSIRV_model &lt;- function(times, state, parms){\n  ## Define variables\n  S &lt;- state[\"S\"]\n  I &lt;- state[\"I\"]\n  R &lt;- state[\"R\"]\n  V &lt;- state[\"V\"]\n  N &lt;- S + I + R + V\n  # Extract parameters\n  beta &lt;- parms[\"beta\"]\n  gamma &lt;- parms[\"gamma\"]\n  v &lt;- parms[\"v\"]\n  # Define differential equations\n  dS &lt;- - (beta * S * I) / N - v * S\n  dI &lt;- (beta * S * I) / N - gamma * I\n  dR &lt;- gamma * I\n  dV &lt;- v * S\n  res &lt;- list(c(dS, dI, dR, dV))\n  return(res)\n}\n\n\n# Define parameter values\nparameters &lt;- c(beta = 0.4, gamma = 0.1, v = 0.05)\n\n# Define initial conditions\nN &lt;- 100\nI_0 &lt;- 1\nS_0 &lt;- N - I_0\nR_0 &lt;- 0\nV_0 &lt;- 0\nstate &lt;- c(S = S_0, I = I_0, R = R_0, V = V_0)\n\n# Solve equations\noutput_raw &lt;- ode(y = state, times = times, func = SIRV_model, parms = parameters,\n                  method = \"rk4\")\n# Convert to data frame for easy extraction of columns\noutput &lt;- as.data.frame(output_raw)\n\n# Plot results\npar(mfrow = c(1, 1))\nplot(output$time, output$S, type = \"l\", col = \"blue\", lwd = 2, ylim = c(0, N),\n     xlab = \"Time\", ylab = \"Number\")\nlines(output$time, output$I, lwd = 2, col = \"green\")\nlines(output$time, output$R, lwd = 2, col = \"red\")\nlines(output$time, output$V, lwd = 2, col = \"purple\")\nlegend( \"topright\", legend = c(\"Susceptible\", \"Infected\", \"Recovered\", \"Vaccinated\"),\n        lty=1, col = c(\"blue\", \"red\", \"green\", 'purple'), lwd = 2, bty = \"n\")"
  },
  {
    "objectID": "03_DiscreteDeterministic_practical.html",
    "href": "03_DiscreteDeterministic_practical.html",
    "title": "03. Discrete Time Deterministic Models: Practical",
    "section": "",
    "text": "time_sir &lt;- seq(0, 20, by = 1)\n\ny_sir &lt;- matrix(data = NA,\n                nrow = length(time_sir),\n                ncol = 3)\n\nupdate_sir &lt;- function(t, y, parms){\n    beta  &lt;- parms[\"beta\"]\n    gamma &lt;- parms[\"gamma\"]\n\n    out &lt;- ???\n\n    return(out)\n}\n\nparms_sir &lt;- c(beta = 1.3,\n               gamma = 0.23)\n\n# initial values at t=0\n\ny_sir[1, ] &lt;- c(???, ???, ???)\n\nfor (i in 2:nrow(y_sir)){\n    y_sir[i,] &lt;- ???\n}\n\nplot(x = time_sir, y = y_sir[,2])\n\nA.1.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nA.1.(b) Approximately how long does it take for the susceptibles to go to 0?\n\n\n\nA.2.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nA.2.(b) Approximately how long does it take for the susceptibles to go to 0?\n\nparms_sir &lt;- c(beta = ???,\n               gamma = ???)\n\ny_sir[1, ] &lt;- ???\n\nfor (i in 2:nrow(y_sir)){\n    y_sir[i,] &lt;- ???\n}\n\nplot(x = ???, y = ???, ylim = c(0,1))\n\n\n\n\nA.3.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nA.3.(b) Approximately how long does it take for the susceptibles to go to 0?\n\nparms_sir &lt;- ???\n\ny_sir[1, ] &lt;- c(0.99, 0.01, 0)\n\nfor (i in 2:nrow(y_sir)){\n    y_sir[i,] &lt;- ???\n}\n\nplot(???)"
  },
  {
    "objectID": "03_DiscreteDeterministic_practical.html#a.-sir-model-from-lecture",
    "href": "03_DiscreteDeterministic_practical.html#a.-sir-model-from-lecture",
    "title": "03. Discrete Time Deterministic Models: Practical",
    "section": "",
    "text": "time_sir &lt;- seq(0, 20, by = 1)\n\ny_sir &lt;- matrix(data = NA,\n                nrow = length(time_sir),\n                ncol = 3)\n\nupdate_sir &lt;- function(t, y, parms){\n    beta  &lt;- parms[\"beta\"]\n    gamma &lt;- parms[\"gamma\"]\n\n    out &lt;- ???\n\n    return(out)\n}\n\nparms_sir &lt;- c(beta = 1.3,\n               gamma = 0.23)\n\n# initial values at t=0\n\ny_sir[1, ] &lt;- c(???, ???, ???)\n\nfor (i in 2:nrow(y_sir)){\n    y_sir[i,] &lt;- ???\n}\n\nplot(x = time_sir, y = y_sir[,2])\n\nA.1.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nA.1.(b) Approximately how long does it take for the susceptibles to go to 0?\n\n\n\nA.2.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nA.2.(b) Approximately how long does it take for the susceptibles to go to 0?\n\nparms_sir &lt;- c(beta = ???,\n               gamma = ???)\n\ny_sir[1, ] &lt;- ???\n\nfor (i in 2:nrow(y_sir)){\n    y_sir[i,] &lt;- ???\n}\n\nplot(x = ???, y = ???, ylim = c(0,1))\n\n\n\n\nA.3.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nA.3.(b) Approximately how long does it take for the susceptibles to go to 0?\n\nparms_sir &lt;- ???\n\ny_sir[1, ] &lt;- c(0.99, 0.01, 0)\n\nfor (i in 2:nrow(y_sir)){\n    y_sir[i,] &lt;- ???\n}\n\nplot(???)"
  },
  {
    "objectID": "03_DiscreteDeterministic_practical.html#b.-sir-model",
    "href": "03_DiscreteDeterministic_practical.html#b.-sir-model",
    "title": "03. Discrete Time Deterministic Models: Practical",
    "section": "B. SIR model",
    "text": "B. SIR model\n\nB.1 Incorporating births\nAdapt the SIR model in the slides to incorporate birth of new susceptibles proportional to the sum of the S, I, and R populations. Balance these new births with deaths from each of the S I and R groups, with both the per capita birth and death rates being delta=0.01\n\nnew_sir &lt;- function(t, y, parms){\n    \n    beta  &lt;- parms[\"beta\"]\n    gamma &lt;- parms[\"gamma\"]\n    delta &lt;- parms[\"delta\"]\n\n    ??? &lt;- ???\n    ??? &lt;- ???\n    ??? &lt;- ???    \n        \n    return(???)\n    \n}\n\nnew_parms &lt;- ???\n\n\n\nB.2 Visualising for the whole population\nCalculate N(t) = S(t) + I(t) the total number of alive individuals. Make a plot of S(t), I(t), R(t) and N(t). Your function N(t) should be constant at 1 for all values of t. If this is not the case, ensure the model contains births of new S proportional to N, and deaths of each of S, I, and R.\n\ny_sir &lt;- cbind(y_sir, rowSums(y_sir))\npar(mfrow = c(2,2))\n\nfor (i in 1:ncol(y_sir)){\n\n    plot(y_sir[,i] ~ time_sir, type = \"p\", \n         xlab = \"Time (years)\")\n\n}\n\nB.2.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nB.2.(b) Approximately how long does it take for the susceptibles to go to 0?\n\n\nB.3 Discussion\nDiscuss what happens to the population of S, I, and R over time. Consider the parameters of the model, what they represent, and whether the assumptions they represent are realistic.\nSolutions to this practical can be accessed here."
  },
  {
    "objectID": "00_PreCourseMaterial.html",
    "href": "00_PreCourseMaterial.html",
    "title": "Pre-course material",
    "section": "",
    "text": "We will be making use of R programming using RStudio in this course. There will be lots of variation in how much R experience each student will have, so we have compiled some pre-course material to allow everyone to get up to the minimal level required to fully participate and enjoy the course. \nEach practical P01 - P05 below comes with a prerecorded lecture and an associated practical (except P03, which is a practical only). Before you get started, please make sure you download R and Rstudio (local version - free) here.\n\nP01 - Introduction to R: Slides, Practical\nP02 - Programming skills, more R fun(ctionality): Slides, Practical\nP03 - Best (computational) practices: Slides, Practical\nP04 - Plotting model output with ggplot2: Slides, Practical\nP05 - Introduction to Git using Github: Slides, Practical\n\nYou are welcome to listen to any of the recorded lectures and complete any of the associated practicals regardless of your experience. However, we’ve made a list of some recommendations below to guide what is expected: \n\nIf you are new to R, please listen to lectures P01 / P02 / P03 / P04 and complete the associated practicals.\nFor those of you who have used R previously but feel a bit rusty, you may find P02 / P03 / P04 helpful to get you back up to speed. If you try P02 and feel you need some more explanation, go back to P01 and start there. \nIf you have never used ‘tidy data’ or ggplot then complete P04.\nIf you are new to Git and Github, please listen to lecture P05. \n\n\nOptional Further Reading and Exercises\nIf you would like additional practice with R, we recommend the following online resources:\n\nhttp://tryr.codeschool.com/\nhttps://monashdatafluency.github.io/r-intro-2/\nhttps://www.r-bloggers.com/how-to-learn-r-2/\nhttps://www.edx.org/course/introduction-to-r-for-data-science-2"
  },
  {
    "objectID": "05_Metapop_practical.html",
    "href": "05_Metapop_practical.html",
    "title": "05. Metapopulations with ODEs: Practical",
    "section": "",
    "text": "The code below has been written to solve a Susceptible-Infected-Recovered model with two populations. Familiarise yourself with the expanded model before moving onto the activities that follow. Note: the compartments C1 and C2 reflect the cumulative numbers of people infected. This will be used later on.\n# Load in the deSolve package\nlibrary(deSolve)\n# If the package is not installed, install using the install.packages() function\n\n# Define model function \nSIR_metapop_model &lt;- function(times, state, parms){\n  ## Define variables\n  S1 &lt;- state[\"S1\"]\n  I1 &lt;- state[\"I1\"]\n  R1 &lt;- state[\"R1\"]\n  C1 &lt;- state[\"C1\"]\n  N1 &lt;- S1 + I1 + R1\n  S2 &lt;- state[\"S2\"]\n  I2 &lt;- state[\"I2\"]\n  R2 &lt;- state[\"R2\"]\n  C2 &lt;- state[\"C2\"]\n  N2 &lt;- S2 + I2 + R2\n  # Extract parameters\n  beta &lt;- parms[\"beta\"]\n  gamma &lt;- parms[\"gamma\"]\n  alpha &lt;- parms[\"alpha\"]\n  lambda1 &lt;- (beta * I1 / N1 + alpha * beta * I2 / N2)\n  lambda2 &lt;- (beta * I2 / N2 + alpha * beta * I1 / N1)\n  # Define differential equations\n  dS1 &lt;- - lambda1 * S1\n  dI1 &lt;- lambda1 * S1 - gamma * I1\n  dR1 &lt;- gamma * I1\n  dC1 &lt;- lambda1 * S1\n  dS2 &lt;- - lambda2 * S2\n  dI2 &lt;-  lambda2 * S2 - gamma * I2\n  dR2 &lt;- gamma * I2\n  dC2 &lt;- lambda2 * S2\n  res &lt;- list(c(dS1, dI1, dR1, dC1, dS2, dI2, dR2, dC2))\n  return(res)\n}\n\n# Define parameters  \nparameters &lt;- c( beta = 0.4, gamma = 0.1, alpha = 1)\n\n# Define time to run model\ntimes &lt;- seq(from = 0, to = 50, by = 1)\n\n# Define initial conditions\nN1 &lt;- 1000; N2 &lt;- 1000\nI1_0 &lt;- 1; I2_0 &lt;- 0\nR1_0 &lt;- 0; R2_0 &lt;- 0\nC1_0 &lt;- 0; C2_0 &lt;- 0\nS1_0  &lt;- N1 - I1_0\nS2_0  &lt;- N2 - I2_0\nstate &lt;- c(S1 = S1_0, I1 = I1_0, R1 = R1_0, C1 = C1_0, \n           S2 = S2_0, I2 = I2_0, R2 = R2_0, C2 = C2_0)\n\n# Solve equations\noutput_raw &lt;- ode(y = state, \n                  times = times, \n                  func = SIR_metapop_model, \n                  parms = parameters,\n                  method = rk4)\n\n# Convert to data frame for easy extraction of columns\noutput &lt;- as.data.frame(output_raw)\n\n# Plot output\npar(mfrow = c(1, 1))\nplot(output$time, output$I1, type = \"l\", col = 4, lwd = 2, ylim = c(0, N1),\n      xlab = \"Time\", ylab = \"Number\", main = \"\")\nlines(output$time, output$I2, lwd = 2, col = 2, type = \"l\")\nlegend(\"topright\", \n       legend = c(\"Infected in population 1\", \n                  \"Infected in population 2\"),\n       lty = rep(1, 2), col = c(4, 2), lwd = 2, bty = \"n\")"
  },
  {
    "objectID": "05_Metapop_practical.html#question-a",
    "href": "05_Metapop_practical.html#question-a",
    "title": "05. Metapopulations with ODEs: Practical",
    "section": "Question A",
    "text": "Question A\nWhen you simulate the above model, you’ll notice that currently the epidemics are nearly identical in the two populations. Update the model parameters so the transmission rate between the two populations is equal to 5% of the transmission rate within each population. What happens to the size and timing of the epidemics?"
  },
  {
    "objectID": "05_Metapop_practical.html#question-b",
    "href": "05_Metapop_practical.html#question-b",
    "title": "05. Metapopulations with ODEs: Practical",
    "section": "Question B",
    "text": "Question B\nWhat happens if the epidemic starts with 10 people infected in both populations? Why does this happen?"
  },
  {
    "objectID": "05_Metapop_practical.html#question-c",
    "href": "05_Metapop_practical.html#question-c",
    "title": "05. Metapopulations with ODEs: Practical",
    "section": "Question C",
    "text": "Question C\nThe model is currently set up to record the number of cumulative cases in each population (i.e. C1 and C2). The below code will plot these cumulative numbers of cases. Update the code so you are plotting incidence, i.e. new cases appearing over time, rather than cumulative cases.\n\npar(mfrow = c(1, 1))\nplot(output$time, output$C1, type = \"l\", col = 4, lwd = 2, ylim = c(0, N1+100), \n     xlab = \"Time\", ylab = \"Number\", main = \"\")\nlines( output$time, output$C2, lwd = 2, col = 2, type = \"l\")\nlegend(\"topright\", \n       legend = c(\"Cumulative cases in population 1\", \n                  \"Cumulative cases in population 2\"),\n       lty = rep(1, 2), col = c(4, 2), lwd = 2, bty = \"n\")\n\n\n\n\n\n\n\n\nHint: Create a new variable that calculates the difference between adjacent timesteps, i.e. C1[2:t] - C1[1:(t-1)]"
  },
  {
    "objectID": "05_Metapop_practical.html#question-d",
    "href": "05_Metapop_practical.html#question-d",
    "title": "05. Metapopulations with ODEs: Practical",
    "section": "Question D",
    "text": "Question D\nWhat does the incidence look like if only 50% of the cases in population 2 are reported?\nHint: There are several ways to do this - some are easier than others."
  },
  {
    "objectID": "05_Metapop_practical.html#question-e",
    "href": "05_Metapop_practical.html#question-e",
    "title": "05. Metapopulations with ODEs: Practical",
    "section": "Question E",
    "text": "Question E\nIf you have time, expand the model to include three populations (denoted 1, 2, 3). How would you model an epidemic where:\n\nmixing between population 1 and population 2 is 5% of the rate of mixing within these populations\nmixing between population 1 and population 3 is 10% of the rate of mixing within these populations\nthere is no mixing between population 2 and population 3\n\nSolutions to this practical can be accessed here."
  },
  {
    "objectID": "06_SensitivitySampling_practical.html",
    "href": "06_SensitivitySampling_practical.html",
    "title": "06. Sensitivity Analysis & Sampling: Practical",
    "section": "",
    "text": "First, let’s run an ODE model. Download and open up the SIRmodel.R\n\n\nAnswer:\n\n\n\nAnswer:\n\n\n\nAnswer:\n# First let's clear our workspace, remove plots and load the libraries we need\nrm(list=ls())\ndev.off()\nlibrary(deSolve)\nlibrary(ggplot2)\n\n# Let's read in these functions so we have them to hand\n&lt;YOUR CODE HERE&gt;\n\n# Let's choose a beta value of 0.4 and a gamma value of 0.2\nmax.prevalence &lt;- solveODE(parameters &lt;- c(beta = 0.4, gamma = 0.2))\nprint(max.prevalence)\n\n# Now let's look at the effect of the maximum prevalence of the epidemic across \n# gamma = 0.1 -1.0 (increment on 0.1)\ngamma.vec &lt;- &lt;YOUR CODE HERE&gt;\n\n# initialise max/prevalence container\nmax.prevalence &lt;- vector()\n\n# Add in a loop to make this happen\n\n&lt;YOUR CODE HERE&gt;\n\nmp &lt;- solveODE(parameters = c(beta = 0.4, gamma = gamma.val),\nplot.all.results = FALSE)\nmax.prevalence &lt;- c(max.prevalence, mp)\n\n&lt;YOUR CODE HERE&gt;\n\n# Now we have our max.prevalence, we need to plot this against our \n# infectiousness duration - plot max.prevalence as a function of the \n# \\*infectiousness duration\\*\n\npar(new=FALSE)\npar(mfrow=c(1,1))\n\nplot(&lt;YOUR CODE HERE&gt;, \n     &lt;YOUR CODE HERE&gt;, \n     type = \"b\",\n     xlab = \"Infectiousness Duration (days)\",\n     ylab = \"Maximum Prevalence\",\n     main = \"One-way uncertainty analysis\")\n\n# Now try to increase the resolution of gamma to get a better idea of the \n# relationship but remember to clear max.prevalence first!\n\n&lt;YOUR CODE HERE&gt;\n\n\n\nAnswer:"
  },
  {
    "objectID": "06_SensitivitySampling_practical.html#one-way-sensitivity-analyses",
    "href": "06_SensitivitySampling_practical.html#one-way-sensitivity-analyses",
    "title": "06. Sensitivity Analysis & Sampling: Practical",
    "section": "",
    "text": "First, let’s run an ODE model. Download and open up the SIRmodel.R\n\n\nAnswer:\n\n\n\nAnswer:\n\n\n\nAnswer:\n# First let's clear our workspace, remove plots and load the libraries we need\nrm(list=ls())\ndev.off()\nlibrary(deSolve)\nlibrary(ggplot2)\n\n# Let's read in these functions so we have them to hand\n&lt;YOUR CODE HERE&gt;\n\n# Let's choose a beta value of 0.4 and a gamma value of 0.2\nmax.prevalence &lt;- solveODE(parameters &lt;- c(beta = 0.4, gamma = 0.2))\nprint(max.prevalence)\n\n# Now let's look at the effect of the maximum prevalence of the epidemic across \n# gamma = 0.1 -1.0 (increment on 0.1)\ngamma.vec &lt;- &lt;YOUR CODE HERE&gt;\n\n# initialise max/prevalence container\nmax.prevalence &lt;- vector()\n\n# Add in a loop to make this happen\n\n&lt;YOUR CODE HERE&gt;\n\nmp &lt;- solveODE(parameters = c(beta = 0.4, gamma = gamma.val),\nplot.all.results = FALSE)\nmax.prevalence &lt;- c(max.prevalence, mp)\n\n&lt;YOUR CODE HERE&gt;\n\n# Now we have our max.prevalence, we need to plot this against our \n# infectiousness duration - plot max.prevalence as a function of the \n# \\*infectiousness duration\\*\n\npar(new=FALSE)\npar(mfrow=c(1,1))\n\nplot(&lt;YOUR CODE HERE&gt;, \n     &lt;YOUR CODE HERE&gt;, \n     type = \"b\",\n     xlab = \"Infectiousness Duration (days)\",\n     ylab = \"Maximum Prevalence\",\n     main = \"One-way uncertainty analysis\")\n\n# Now try to increase the resolution of gamma to get a better idea of the \n# relationship but remember to clear max.prevalence first!\n\n&lt;YOUR CODE HERE&gt;\n\n\n\nAnswer:"
  },
  {
    "objectID": "06_SensitivitySampling_practical.html#monte-carlo-sampling",
    "href": "06_SensitivitySampling_practical.html#monte-carlo-sampling",
    "title": "06. Sensitivity Analysis & Sampling: Practical",
    "section": "(2) Monte Carlo Sampling",
    "text": "(2) Monte Carlo Sampling\nNow suppose that we have a previous epidemiological study that suggested that R0 has a mean value of 5, but uncertainty within the range of [-1, +1]. However, we still don’t know whether the infectiousness period is 1 day or 10 days. We will now use the functions in SIRmodel_R0.R to make a similar plot as above, but this time, incorporate the uncertainty of R0 for each discrete value of gamma. We’re going to first use a direct Monte Carlo Sampling method.\n# Read in our set of functions in SIRmodel_R0.R\n&lt;YOUR CODE HERE&gt;\n\n# First, let's set a fixed seed for the random number generator\n# this will allow us to run the code again and retrieve the same 'simulation'\nset.seed(2019)\n\n# Now, draw R0 1,000 times from a suitable distribution (e.g. normal)\nr0.all = &lt;YOUR CODE HERE&gt;\nsize.df = length(r0.all) * length(gamma.vec)\n\n# initialise max.prevalence again, this time it needs to be a dataframe \n# or a matrix\nmax.prevalence = data.frame(r0.value = vector(mode = \"numeric\", \n                                            length = size.df),\ngamma = vector(mode= \"numeric\", length = size.df),\nmax.prev = vector(mode= \"numeric\", length = size.df))\nindex = 0\n\n# create a loop over each of these R0 values in turn\nfor (r0.val in r0.all){\n# create a loop over each of these Gamma values in turn\n    for (gamma.val in gamma.vec){\n    index = index + 1\n    mp = solveODE_2(parameters = c(R0 = r0.val, gamma = gamma.val))\n    max.prevalence[index, \"r0.value\"] = r0.val\n    max.prevalence[index, \"gamma\"] = gamma.val\n    max.prevalence[index, \"max.prev\"] = mp\n    }\n}\n\n# Take a look at max.prevalence by using the 'head() function\nhead(max.prevalence)\n\n(e) How have we saved the output?\nAnswer:\nNow plot this output using the R function MCplot() in SIRmodel_R0.R\nMCplot(max.prevalence)\n\n\n(f) What conclusions can you draw from the plot?\nAnswer:"
  },
  {
    "objectID": "06_SensitivitySampling_practical.html#latin-hypercube-sampling-lhs-vs-monte-carlo-sampling",
    "href": "06_SensitivitySampling_practical.html#latin-hypercube-sampling-lhs-vs-monte-carlo-sampling",
    "title": "06. Sensitivity Analysis & Sampling: Practical",
    "section": "(3) Latin hypercube sampling (LHS) vs Monte Carlo Sampling",
    "text": "(3) Latin hypercube sampling (LHS) vs Monte Carlo Sampling\n# First let's load in the library we'll need for later\nlibrary(lhs)\n\n# We're going to first sample directly from a full distribution uniform \n# distribution from 0 to 1. How many samples will we need to take? \n# Let's try a few options and see how well they do\n\npar(mfrow=c(3,2))\nhist(rnorm(10))\nhist(rnorm(100))\nhist(rnorm(1000))\nhist(rnorm(10000))\nhist(rnorm(20000))\n\n# Now let's plot the sample sizes against the variance of the sample distribution\n\nplot(\n    c(10,100,1000,10000,50000,100000),\n    c(var(rnorm(10)), var(rnorm(100)), var(rnorm(1000)), var(rnorm(10000)), \n      var(rnorm(50000)), var(rnorm(100000))),\n    ylab = \"variance\", main = \"Variance of sampled normal\"\n    )\nabline(h = 1)\n\n# Let's now use 100 samples to see the difference between a Monte Carlo \n# sampling and a LHS sampling approach\n# Pick some small number of samples\nn &lt;- 100\n\n# First we're going to sample 100 times from a random sample\nmc_unif &lt;- runif(n)\n\n# 100 lh samples across 1 parameter\nlatin_unif &lt;- randomLHS(n, 1)\n\n# plot these two distribution\ndev.off()\npar(mfrow=c(3,2))\nhist(mc_unif)\nhist(latin_unif)\n\n# You can see how the Latin Hypercube does a great job of sampling evenly across \n# the distribution. Let's now sample from a Normal distribution using a random \n# monte carlo sample across the whole distribution.\nmc_norm &lt;- rnorm(n, mean = 0, sd = 1)\n\n# How do we sample using an LHS? We use the previous numbers generated from the \n# uniform LHS to draw samples from the Normal using the Inverse Cumulative \n# Sampling\nlatin_norm &lt;- qnorm(latin_unif, mean = 0, sd = 1)\n\n# plot these two normal distributions\nhist(mc_norm)\nhist(latin_norm)\n\n# the latin hypercube sample looks much better! Why does this work?\n# first let's look at the norm probability distibution\nx &lt;- seq(-6,6, by =0.1) # random variable X\nnormdens &lt;- dnorm(x, mean = 0, sd = 1) # prob distribution, f(X)\nnormcumul &lt;- pnorm(x, mean = 0, sd = 1) # cumulative distribution, F(X)\n\nplot(x, normdens, \"l\")\nplot(x, normcumul, \"l\")\n\n# Most of the density is in the middle range of values (-1 to 1).\n\n# So we want a method to sample from this more often than the other areas in \n# the distribution. Specifically, we want to sample values from X proportionally \n# to the probability of those values occuring. Let's generate some samples \n# between 0-1. These can be values on our Y-axis. Then, if we ask what is the \n# value of the cumulative distribution that corresponds to these uniform \n# values we are taking the inverse for illustration let's just choose 10 points.\n\nex_latin &lt;- randomLHS(10, 1)\n\n# which X values are given by using these as the Y value (denoted by \"X\"s)?\n\nabline(h = ex_latin, col = \"red\")\npoints(qnorm(ex_latin, mean = 0, sd = 1), y=rep(0,10), pc = \"x\")\n\n# You can see that the samples are clustered around the middle: in areas of X \n# with higher density, the gradient of the cumluative distribution (F(X)) will \n# be very steep, causing more values between 0 and 1 to map to this range of X \n# with high density That is, F\\^{-1}(R) = X where R is a uniform random number \n# between 0 and 1.\n\n# So, you can sample from any distribution whose cumluative function is \n# 'invertable' by plugging in uniform random numbers to the inverse cumulative \n# function of your new distribution. For more information check out: \n# https://en.wikipedia.org/wiki/Inverse_transform_sampling\n\n# Likewise, to perform LHS on a uni- or mulitvariate non-uniform distribution, \n# we can transform our LHS samples from a uniform distribution as above.\nSolutions to this practical can be accessed here."
  },
  {
    "objectID": "05_Metapop_solutions.html",
    "href": "05_Metapop_solutions.html",
    "title": "05. Metapopulations with ODEs: Solutions",
    "section": "",
    "text": "Click here to return to the practical.\nThe code below has been written to solve a Susceptible-Infected-Recovered model with two populations. Familiarise yourself with the expanded model before moving onto the activities that follow. Note: the compartments C1 and C2 reflect the cumulative numbers of people infected. This will be used later on.\n# Load in the deSolve package\nlibrary(deSolve)\n# If the package is not installed, install using the install.packages() function\n\n# Define model function \nSIR_metapop_model &lt;- function(times, state, parms){\n  ## Define variables\n  S1 &lt;- state[\"S1\"]\n  I1 &lt;- state[\"I1\"]\n  R1 &lt;- state[\"R1\"]\n  C1 &lt;- state[\"C1\"]\n  N1 &lt;- S1 + I1 + R1\n  S2 &lt;- state[\"S2\"]\n  I2 &lt;- state[\"I2\"]\n  R2 &lt;- state[\"R2\"]\n  C2 &lt;- state[\"C2\"]\n  N2 &lt;- S2 + I2 + R2\n  # Extract parameters\n  beta &lt;- parms[\"beta\"]\n  gamma &lt;- parms[\"gamma\"]\n  alpha &lt;- parms[\"alpha\"]\n  lambda1 &lt;- (beta * I1 / N1 + alpha * beta * I2 / N2)\n  lambda2 &lt;- (beta * I2 / N2 + alpha * beta * I1 / N1)\n  # Define differential equations\n  dS1 &lt;- - lambda1 * S1\n  dI1 &lt;- lambda1 * S1 - gamma * I1\n  dR1 &lt;- gamma * I1\n  dC1 &lt;- lambda1 * S1\n  dS2 &lt;- - lambda2 * S2\n  dI2 &lt;-  lambda2 * S2 - gamma * I2\n  dR2 &lt;- gamma * I2\n  dC2 &lt;- lambda2 * S2\n  res &lt;- list(c(dS1, dI1, dR1, dC1, dS2, dI2, dR2, dC2))\n  return(res)\n}\n\n# Define parameters  \nparameters &lt;- c( beta = 0.4, gamma = 0.1, alpha = 1)\n\n# Define time to run model\ntimes &lt;- seq(from = 0, to = 50, by = 1)\n\n# Define initial conditions\nN1 &lt;- 1000; N2 &lt;- 1000\nI1_0 &lt;- 1; I2_0 &lt;- 0\nR1_0 &lt;- 0; R2_0 &lt;- 0\nC1_0 &lt;- 0; C2_0 &lt;- 0\nS1_0  &lt;- N1 - I1_0\nS2_0  &lt;- N2 - I2_0\nstate &lt;- c(S1 = S1_0, I1 = I1_0, R1 = R1_0, C1 = C1_0, \n           S2 = S2_0, I2 = I2_0, R2 = R2_0, C2 = C2_0)\n\n# Solve equations\noutput_raw &lt;- ode(y = state, \n                  times = times, \n                  func = SIR_metapop_model, \n                  parms = parameters,\n                  method = rk4)\n\n# Convert to data frame for easy extraction of columns\noutput &lt;- as.data.frame(output_raw)\n\n# Plot output\npar(mfrow = c(1, 1))\nplot(output$time, output$I1, type = \"l\", col = 4, lwd = 2, ylim = c(0, N1),\n      xlab = \"Time\", ylab = \"Number\", main = \"\")\nlines(output$time, output$I2, lwd = 2, col = 2, type = \"l\")\nlegend(\"topright\", \n       legend = c(\"Infected in population 1\", \n                  \"Infected in population 2\"),\n       lty = rep(1, 2), col = c(4, 2), lwd = 2, bty = \"n\")"
  },
  {
    "objectID": "05_Metapop_solutions.html#question-a",
    "href": "05_Metapop_solutions.html#question-a",
    "title": "05. Metapopulations with ODEs: Solutions",
    "section": "Question A",
    "text": "Question A\nWhen you simulate the above model, you’ll notice that currently the epidemics are nearly identical in the two populations. Update the model parameters so the transmission rate between the two populations is equal to 5% of the transmission rate within each population. What happens to the size and timing of the epidemics?\nAnswer: Epidemic is delayed with slightly smaller peak in population 2 because takes time for infection to spread.\n\nparameters &lt;- c( beta = 0.4, gamma = 0.1, alpha = 0.05)"
  },
  {
    "objectID": "05_Metapop_solutions.html#question-b",
    "href": "05_Metapop_solutions.html#question-b",
    "title": "05. Metapopulations with ODEs: Solutions",
    "section": "Question B",
    "text": "Question B\nWhat happens if the epidemic starts with 10 people infected in both populations? Why does this happen?\nAnswer: Epidemics are identical because initial conditions are the same. Although there is some connectivity between populations, it is symmetrical, so same dynamics in both."
  },
  {
    "objectID": "05_Metapop_solutions.html#question-c",
    "href": "05_Metapop_solutions.html#question-c",
    "title": "05. Metapopulations with ODEs: Solutions",
    "section": "Question C",
    "text": "Question C\nThe model is currently set up to record the number of cumulative cases in each population (i.e. C1 and C2). The below code will plot these cumulative numbers of cases. Update the code so you are plotting incidence, i.e. new cases appearing over time, rather than cumulative cases.\n\npar(mfrow = c(1, 1))\nplot(output$time, output$C1, type = \"l\", col = 4, lwd = 2, ylim = c(0, N1+100), \n     xlab = \"Time\", ylab = \"Number\", main = \"\")\nlines( output$time, output$C2, lwd = 2, col = 2, type = \"l\")\nlegend(\"topright\", \n       legend = c(\"Cumulative cases in population 1\", \n                  \"Cumulative cases in population 2\"),\n       lty = rep(1, 2), col = c(4, 2), lwd = 2, bty = \"n\")\n\n\n\n\n\n\n\n\nHint: Create a new variable that calculates the difference between adjacent timesteps, i.e. C1[2:t] - C1[1:(t-1)]\nAnswer:\n\ncases1 &lt;- tail(output$C1,-1) - head(output$C1,-1)\ncases2 &lt;- tail(output$C2,-1) - head(output$C2,-1)\ntime_cases &lt;- tail(output$time,-1)\n\nplot( time_cases, cases1, type = \"l\", col = 4, lwd = 2, ylim = c(0, N1+100),\n      xlab = \"Time\", ylab = \"Number\", main = \"\")\nlines( time_cases, cases2, lwd = 2, col = 2, type = \"l\")\nlegend(\"topright\", legend = c(\"Cases in population 1\", \"Cases in population 2\"),\n       lty = rep(1, 2), col = c(4, 2), lwd = 2, bty = \"n\")"
  },
  {
    "objectID": "05_Metapop_solutions.html#question-d",
    "href": "05_Metapop_solutions.html#question-d",
    "title": "05. Metapopulations with ODEs: Solutions",
    "section": "Question D",
    "text": "Question D\nWhat does the incidence look like if only 50% of the cases in population 2 are reported?\nHint: There are several ways to do this - some are easier than others.\nAnswer:\n\ncases2 &lt;- 0.5*cases2\n\nplot( time_cases, cases1, type = \"l\", col = 4, lwd = 2, ylim = c(0, N1+100),\n      xlab = \"Time\", ylab = \"Number\", main = \"\")\nlines( time_cases, cases2, lwd = 2, col = 2, type = \"l\")\nlegend(\"topright\", legend = c(\"Cases in population 1\", \"Cases in population 2\"),\n       lty = rep(1, 2), col = c(4, 2), lwd = 2, bty = \"n\")"
  },
  {
    "objectID": "05_Metapop_solutions.html#question-e",
    "href": "05_Metapop_solutions.html#question-e",
    "title": "05. Metapopulations with ODEs: Solutions",
    "section": "Question E",
    "text": "Question E\nIf you have time, expand the model to include three populations (denoted 1, 2, 3). How would you model an epidemic where:\n\nmixing between population 1 and population 2 is 5% of the rate of mixing within these populations\nmixing between population 1 and population 3 is 10% of the rate of mixing within these populations\nthere is no mixing between population 2 and population 3\n\nAnswer:\n\n# Define model function\nSIR_metapop_model_3 &lt;- function(times, state, parms){\n  ## Define variables\n  S1 &lt;- state[\"S1\"]\n  I1 &lt;- state[\"I1\"]\n  R1 &lt;- state[\"R1\"]\n  C1 &lt;- state[\"C1\"]\n  N1 &lt;- S1 + I1 + R1\n\n  S2 &lt;- state[\"S2\"]\n  I2 &lt;- state[\"I2\"]\n  R2 &lt;- state[\"R2\"]\n  C2 &lt;- state[\"C2\"]\n  N2 &lt;- S2 + I2 + R2\n\n  S3 &lt;- state[\"S3\"]\n  I3 &lt;- state[\"I3\"]\n  R3 &lt;- state[\"R3\"]\n  C3 &lt;- state[\"C3\"]\n  N3 &lt;- S3 + I3 + R3\n\n  # Extract parameters\n  beta &lt;- parms[\"beta\"]\n  gamma &lt;- parms[\"gamma\"]\n  alpha1 &lt;- parms[\"alpha1\"]\n  alpha2 &lt;- parms[\"alpha2\"]\n  lambda1 &lt;- (beta * I1 / N1 + alpha1 * beta * I2 / N2 + alpha2 * beta * I3 / N3)\n  lambda2 &lt;- (beta * I2 / N2 + alpha1 * beta * I1 / N1)\n  lambda3 &lt;- (beta * I3 / N3 + alpha2 * beta * I1 / N1)\n\n  # Define differential equations\n  dS1 &lt;- - lambda1 * S1\n  dI1 &lt;- lambda1 * S1 - gamma * I1\n  dR1 &lt;- gamma * I1\n  dC1 &lt;- lambda1 * S1\n  dS2 &lt;- - lambda2 * S2\n  dI2 &lt;-  lambda2 * S2 - gamma * I2\n  dR2 &lt;- gamma * I2\n  dC2 &lt;- lambda2 * S2\n  dS3 &lt;- - lambda3 * S3\n  dI3 &lt;-  lambda3 * S3 - gamma * I3\n  dR3 &lt;- gamma * I3\n  dC3 &lt;- lambda3 * S3\n\n  res &lt;- list(c(dS1, dI1, dR1, dC1, dS2, dI2, dR2, dC2, dS3, dI3, dR3, dC3))\n  return(res)\n}\n\n# Define parameters\nparameters &lt;- c( beta = 0.4, gamma = 0.1, alpha1 = 0.05, alpha2 = 0.1)\n\n# Define time to run model\ntimes &lt;- seq(from = 0, to = 50, by = 1)\n\n# Define initial conditions\nN1 &lt;- 1000; N2 &lt;- 1000; N3 &lt;- 1000\nI1_0 &lt;- 1; I2_0 &lt;- 0; I3_0 &lt;- 0\nR1_0 &lt;- 0; R2_0 &lt;- 0; R3_0 &lt;- 0\nC1_0 &lt;- 0; C2_0 &lt;- 0; C3_0 &lt;- 0\nS1_0  &lt;- N1 - I1_0; S2_0  &lt;- N2 - I2_0; S3_0  &lt;- N3 - I3_0\nstate &lt;- c(S1 = S1_0, I1 = I1_0, R1 = R1_0, C1 = C1_0, S2 = S2_0, I2 = I2_0, \n           R2 = R2_0, C2 = C2_0, S3 = S3_0, I3 = I3_0, R3 = R3_0, C3 = C3_0)\n\n# Solve equations\noutput_raw &lt;- ode(y = state, \n                  times = times, \n                  func = SIR_metapop_model_3, \n                  parms = parameters,\n                  method = rk4)\n\n# Convert to data frame for easy extraction of columns\noutput &lt;- as.data.frame(output_raw)\n\n# Plot output\npar( mfrow = c(1, 1))\nplot( output$time, output$I1, type = \"l\", col = 4, lwd = 2, ylim = c(0, N1),\n      xlab = \"Time\", ylab = \"Number\", main = \"\")\nlines( output$time, output$I2, lwd = 2, col = 2, type = \"l\")\nlines( output$time, output$I3, lwd = 2, col = 3, type = \"l\")\nlegend(\"topright\", \n       legend = c(\"Infected in population 1\", \n                  \"Infected in population 2\",\n                  \"Infected in population 3\"),\n       lty = rep(1, 2), col = c(4, 2,3), lwd = 2, bty = \"n\")"
  },
  {
    "objectID": "03_DiscreteDeterministic_solutions.html",
    "href": "03_DiscreteDeterministic_solutions.html",
    "title": "03. Discrete Time Deterministic Models: Solutions",
    "section": "",
    "text": "Click here to return to the practical."
  },
  {
    "objectID": "03_DiscreteDeterministic_solutions.html#a.-sir-model-from-lecture",
    "href": "03_DiscreteDeterministic_solutions.html#a.-sir-model-from-lecture",
    "title": "03. Discrete Time Deterministic Models: Solutions",
    "section": "A. SIR model from lecture",
    "text": "A. SIR model from lecture\n\nA.1 Implement the SIR model from the slides and lot the proportion of the population that is infectious.\nAnswer:\n\ntime_sir &lt;- seq(0, 20, by = 1)\ny_sir &lt;- matrix(data = NA,\n                nrow = length(time_sir),\n                ncol = 3)\n\nupdate_sir &lt;- function(t, y, parms){\n    beta  &lt;- parms[\"beta\"]\n    gamma &lt;- parms[\"gamma\"]\n    \n    out &lt;- c(-beta*y[1]*y[2],\n             beta*y[1]*y[2] - gamma*y[2],\n             + gamma*y[2])\n    \n    return(out)\n}\n\nparms_sir &lt;- c(beta = 1.3,\n               gamma = 0.23)\n\n# initial values at t=0\ny_sir[1, ] &lt;- c(0.99, 0.01, 0)\nfor (i in 2:nrow(y_sir)){\n    y_sir[i,] &lt;- y_sir[i-1,] +\n        update_sir(time_sir[i],\n                   y_sir[i-1, ],\n                   parms_sir)\n}\n\nplot(x = time_sir, y = y_sir[,2], ylim = c(0,1))\n\n\n\n\n\n\n\n\nA.1.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nAnswer: After approximately 7 days, the proportion infectious is 0.6.\nA.1.(b) Approximately how long does it take for the susceptibles to go to 0?\nAnswer: After 13 days, the proportion susceptible is below 0.001\n\n\nA.2 Change the mean time spent infectious from 4.35 days to 2 days, keeping the rate of transmission the same.\nA.2.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nAnswer: After 8 days, the proportion infectious is 0.3\nA.2.(b) Approximately how long does it take for the susceptibles to go to 0?\nAnswer: After 20 days, the proportion susceptible is still above 0.05\n\nparms_sir &lt;- c(beta = 1.3,\n               gamma = 1/2)\n\ny_sir[1, ] &lt;- c(0.99, 0.01, 0)\n\nfor (i in 2:nrow(y_sir)){\n    y_sir[i,] &lt;- y_sir[i-1,] +\n        update_sir(time_sir[i],\n                   y_sir[i-1, ],\n                   parms_sir)\n}\n\nplot(x = time_sir, y = y_sir[,2], ylim = c(0,1))\n\n\n\nA.3 Change the mean time spent infectious back to 4.35 days and set the transmission rate to be half what is has been\nA.3.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nAnswer: After 14 days, the proportion infectious is approximately 0.31\nA.3.(b) Approximately how long does it take for the susceptibles to go to 0?\nAnswer: Even after 20 days, the susceptible group is 0.1 of the population\n\nparms_sir &lt;- c(beta = 1.3/2,\n               gamma = 0.23)\n\ny_sir[1, ] &lt;- c(0.99, 0.01, 0)\n\nfor (i in 2:nrow(y_sir)){\n    y_sir[i,] &lt;- y_sir[i-1,] +\n        update_sir(time_sir[i],\n                   y_sir[i-1, ],\n                   parms_sir)\n}\n\nplot(x = time_sir, y = y_sir[,2], ylim = c(0,1))"
  },
  {
    "objectID": "03_DiscreteDeterministic_solutions.html#b.-sir-model",
    "href": "03_DiscreteDeterministic_solutions.html#b.-sir-model",
    "title": "03. Discrete Time Deterministic Models: Solutions",
    "section": "B. SIR model",
    "text": "B. SIR model\n\nB.1 Incorporating births\nAdapt the SIR model in the slides to incorporate birth of new susceptibles proportional to the sum of the S, I, and R populations. Balance these new births with deaths from each of the S I and R groups, with both the per capita birth and death rates being delta=0.01\nAnswer:\n\nnew_sir &lt;- function(t, y, parms){\n    S &lt;- y[1]\n    I &lt;- y[2]\n    R &lt;- y[3]\n    \n    \n    beta  &lt;- parms[\"beta\"]\n    gamma &lt;- parms[\"gamma\"]\n    delta &lt;- parms[\"delta\"]\n    \n    out &lt;- c(-beta*y[1]*y[2] + delta*sum(y) - delta*S,\n             beta*y[1]*y[2] - gamma*y[2] - delta*I,\n             gamma*y[2] - delta*R)\n    \n    return(out)\n}\n\nnew_parms &lt;- c(beta = 1.3, gamma = 0.23, delta = 0.1)\n\ntime_sir &lt;- seq(0,20,by=1)\ny_sir    &lt;- matrix(data = NA, ncol = 3, nrow = length(time_sir))\ny_sir[1, ] &lt;- c(0.99, 0.01, 0)\n\nfor (i in 2:nrow(y_sir)){\n    y_sir[i,] &lt;- y_sir[i-1,] +\n        new_sir(time_sir[i],\n                y_sir[i-1, ],\n                new_parms)\n}\n\nplot(x = time_sir, y = y_sir[,2], ylim = c(0,1))\n\n\n\n\n\n\n\n\n\n\nB.2 Visualising for the whole population\nCalculate N(t) = S(t) + I(t) the total number of alive individuals. Make a plot of S(t), I(t), R(t) and N(t). Your function N(t) should be constant at 1 for all values of t. If this is not the case, ensure the model contains births of new S proportional to N, and deaths of each of S, I, and R.\nAnswer:\n\n\n\n\n\n\n\n\n\nB.2.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nAnswer: After 8 days, the proportion infectious is approximately 0.54\nB.2.(b) Approximately how long does it take for the susceptibles to go to 0?\nAnswer: The susceptible population does not go to 0, due to the birth of new susceptibles\n\n\nB.3 Discussion\nDiscuss what happens to the population of S, I, and R over time. Consider the parameters of the model, what they represent, and whether the assumptions they represent are realistic.\nAnswer:\nS(t): The population decreases to a minimum at about 9 days but the birth of new susceptibles prevents it reaching 0. It will continue to increase to a stable equilibrium.\nI(t): The population increases to a peak and then the recovery process causes the population to decrease. The infectious population does not decrease down to 0 as before as the new susceptibles will get infected. The long-term behaviour is a stable equilibrium.\nR(t): The recovered population increases to a peak and then decreases to a stable equilibrium as the recovered population die and are replaced with susceptibles. There’s an implicit assumption in the model that transmission is not passed to newborns; i.e. only susceptibles are born. This is likely a reasonable assumption to make for many diseases. As we are dealing the proportion of the total population it’s reasonable to keep N(t) constant, but the birth and death rates may not be reasonable. Instead, we might be best to allow them to grow indefinitely (or, if the death rate is higher, decrease to 0).\nAdditionally, we assume that the entire population is capable of giving birth to newborns, and that the disease does not cause a loss of life expectancy."
  }
]