[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Modern Techniques in Modelling",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2\n\n\nSession 3 - Discrete time deterministic models: Slides, Practical, Solutions\nSession 6 - Sensitivity analysis & sampling: Slides, Practical, Solutions"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Your course organisers are Nicholas Davies and Yang Liu.\nYour course administrator is .\nOther lectures and demonstrators include ."
  },
  {
    "objectID": "03_DiscreteDeterministic.html",
    "href": "03_DiscreteDeterministic.html",
    "title": "03. Discrete Time Deterministic Models: Practical",
    "section": "",
    "text": "time_sir <- seq(0, 20, by = 1)\n\ny_sir <- matrix(data = NA,\n                nrow = length(time_sir),\n                ncol = 3)\n\nupdate_sir <- function(t, y, parms){\n    beta  <- parms[\"beta\"]\n    gamma <- parms[\"gamma\"]\n\n    out <- ???\n\n    return(out)\n}\n\nparms_sir <- c(beta = 1.3,\n               gamma = 0.23)\n\n# initial values at t=0\n\ny_sir[1, ] <- c(???, ???, ???)\n\nfor (i in 2:nrow(y_sir)){\n    y_sir[i,] <- ???\n}\n\nplot(x = time_sir, y = y_sir[,2])\n\nA.1.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nA.1.(b) Approximately how long does it take for the susceptibles to go to 0?\n\n\n\nA.2.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nA.2.(b) Approximately how long does it take for the susceptibles to go to 0?\n\nparms_sir <- c(beta = ???,\n               gamma = ???)\n\ny_sir[1, ] <- ???\n\nfor (i in 2:nrow(y_sir)){\n    y_sir[i,] <- ???\n}\n\nplot(x = ???, y = ???, ylim = c(0,1))\n\n\n\n\nA.3.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nA.3.(b) Approximately how long does it take for the susceptibles to go to 0?\n\nparms_sir <- ???\n\ny_sir[1, ] <- c(0.99, 0.01, 0)\n\nfor (i in 2:nrow(y_sir)){\n    y_sir[i,] <- ???\n}\n\nplot(???)"
  },
  {
    "objectID": "03_DiscreteDeterministic.html#b.-sir-model",
    "href": "03_DiscreteDeterministic.html#b.-sir-model",
    "title": "03. Discrete Time Deterministic Models: Practical",
    "section": "B. SIR model",
    "text": "B. SIR model\n\nB.1 Incorporating births\nAdapt the SIR model in the slides to incorporate birth of new susceptibles proportional to the sum of the S, I, and R populations. Balance these new births with deaths from each of the S I and R groups, with both the per capita birth and death rates being delta=0.01\n\nnew_sir <- function(t, y, parms){\n    \n    beta  <- parms[\"beta\"]\n    gamma <- parms[\"gamma\"]\n    delta <- parms[\"delta\"]\n\n    ??? <- ???\n    ??? <- ???\n    ??? <- ???    \n        \n    return(???)\n    \n}\n\nnew_parms <- ???\n\n\n\nB.2 Visualising for the whole population\nCalculate N(t) = S(t) + I(t) the total number of alive individuals. Make a plot of S(t), I(t), R(t) and N(t). Your function N(t) should be constant at 1 for all values of t. If this is not the case, ensure the model contains births of new S proportional to N, and deaths of each of S, I, and R.\n\ny_sir <- cbind(y_sir, rowSums(y_sir))\npar(mfrow = c(2,2))\n\nfor (i in 1:ncol(y_sir)){\n\n    plot(y_sir[,i] ~ time_sir, type = \"p\", \n         xlab = \"Time (years)\")\n\n}\n\nB.2.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nB.2.(b) Approximately how long does it take for the susceptibles to go to 0?\n\n\nB.3 Discussion\nDiscuss what happens to the population of S, I, and R over time. Consider the parameters of the model, what they represent, and whether the assumptions they represent are realistic."
  },
  {
    "objectID": "03_DiscreteDeterministic_solutions.html",
    "href": "03_DiscreteDeterministic_solutions.html",
    "title": "03. Discrete Time Deterministic Models: Solutions",
    "section": "",
    "text": "Click here to return to the practical."
  },
  {
    "objectID": "03_DiscreteDeterministic_solutions.html#b.-sir-model",
    "href": "03_DiscreteDeterministic_solutions.html#b.-sir-model",
    "title": "03. Discrete Time Deterministic Models: Solutions",
    "section": "B. SIR model",
    "text": "B. SIR model\n\nB.1 Incorporating births\nAdapt the SIR model in the slides to incorporate birth of new susceptibles proportional to the sum of the S, I, and R populations. Balance these new births with deaths from each of the S I and R groups, with both the per capita birth and death rates being delta=0.01\nAnswer:\n\nnew_sir &lt;- function(t, y, parms){\n    S &lt;- y[1]\n    I &lt;- y[2]\n    R &lt;- y[3]\n    \n    \n    beta  &lt;- parms[\"beta\"]\n    gamma &lt;- parms[\"gamma\"]\n    delta &lt;- parms[\"delta\"]\n    \n    out &lt;- c(-beta*y[1]*y[2] + delta*sum(y) - delta*S,\n             beta*y[1]*y[2] - gamma*y[2] - delta*I,\n             gamma*y[2] - delta*R)\n    \n    return(out)\n}\n\nnew_parms &lt;- c(beta = 1.3, gamma = 0.23, delta = 0.1)\n\ntime_sir &lt;- seq(0,20,by=1)\ny_sir    &lt;- matrix(data = NA, ncol = 3, nrow = length(time_sir))\ny_sir[1, ] &lt;- c(0.99, 0.01, 0)\n\nfor (i in 2:nrow(y_sir)){\n    y_sir[i,] &lt;- y_sir[i-1,] +\n        new_sir(time_sir[i],\n                y_sir[i-1, ],\n                new_parms)\n}\n\nplot(x = time_sir, y = y_sir[,2], ylim = c(0,1))\n\n\n\n\n\n\n\n\n\n\nB.2 Visualising for the whole population\nCalculate N(t) = S(t) + I(t) the total number of alive individuals. Make a plot of S(t), I(t), R(t) and N(t). Your function N(t) should be constant at 1 for all values of t. If this is not the case, ensure the model contains births of new S proportional to N, and deaths of each of S, I, and R.\nAnswer:\n\n\n\n\n\n\n\n\n\nB.2.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nAnswer: After 8 days, the proportion infectious is approximately 0.54\nB.2.(b) Approximately how long does it take for the susceptibles to go to 0?\nAnswer: The susceptible population does not go to 0, due to the birth of new susceptibles\n\n\nB.3 Discussion\nDiscuss what happens to the population of S, I, and R over time. Consider the parameters of the model, what they represent, and whether the assumptions they represent are realistic.\nAnswer:\nS(t): The population decreases to a minimum at about 9 days but the birth of new susceptibles prevents it reaching 0. It will continue to increase to a stable equilibrium.\nI(t): The population increases to a peak and then the recovery process causes the population to decrease. The infectious population does not decrease down to 0 as before as the new susceptibles will get infected. The long-term behaviour is a stable equilibrium.\nR(t): The recovered population increases to a peak and then decreases to a stable equilibrium as the recovered population die and are replaced with susceptibles. There’s an implicit assumption in the model that transmission is not passed to newborns; i.e. only susceptibles are born. This is likely a reasonable assumption to make for many diseases. As we are dealing the proportion of the total population it’s reasonable to keep N(t) constant, but the birth and death rates may not be reasonable. Instead, we might be best to allow them to grow indefinitely (or, if the death rate is higher, decrease to 0).\nAdditionally, we assume that the entire population is capable of giving birth to newborns, and that the disease does not cause a loss of life expectancy."
  },
  {
    "objectID": "03_DiscreteDeterministic_practical.html",
    "href": "03_DiscreteDeterministic_practical.html",
    "title": "03. Discrete Time Deterministic Models: Practical",
    "section": "",
    "text": "time_sir &lt;- seq(0, 20, by = 1)\n\ny_sir &lt;- matrix(data = NA,\n                nrow = length(time_sir),\n                ncol = 3)\n\nupdate_sir &lt;- function(t, y, parms){\n    beta  &lt;- parms[\"beta\"]\n    gamma &lt;- parms[\"gamma\"]\n\n    out &lt;- ???\n\n    return(out)\n}\n\nparms_sir &lt;- c(beta = 1.3,\n               gamma = 0.23)\n\n# initial values at t=0\n\ny_sir[1, ] &lt;- c(???, ???, ???)\n\nfor (i in 2:nrow(y_sir)){\n    y_sir[i,] &lt;- ???\n}\n\nplot(x = time_sir, y = y_sir[,2])\n\nA.1.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nA.1.(b) Approximately how long does it take for the susceptibles to go to 0?\n\n\n\nA.2.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nA.2.(b) Approximately how long does it take for the susceptibles to go to 0?\n\nparms_sir &lt;- c(beta = ???,\n               gamma = ???)\n\ny_sir[1, ] &lt;- ???\n\nfor (i in 2:nrow(y_sir)){\n    y_sir[i,] &lt;- ???\n}\n\nplot(x = ???, y = ???, ylim = c(0,1))\n\n\n\n\nA.3.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nA.3.(b) Approximately how long does it take for the susceptibles to go to 0?\n\nparms_sir &lt;- ???\n\ny_sir[1, ] &lt;- c(0.99, 0.01, 0)\n\nfor (i in 2:nrow(y_sir)){\n    y_sir[i,] &lt;- ???\n}\n\nplot(???)"
  },
  {
    "objectID": "03_DiscreteDeterministic_practical.html#b.-sir-model",
    "href": "03_DiscreteDeterministic_practical.html#b.-sir-model",
    "title": "03. Discrete Time Deterministic Models: Practical",
    "section": "B. SIR model",
    "text": "B. SIR model\n\nB.1 Incorporating births\nAdapt the SIR model in the slides to incorporate birth of new susceptibles proportional to the sum of the S, I, and R populations. Balance these new births with deaths from each of the S I and R groups, with both the per capita birth and death rates being delta=0.01\n\nnew_sir &lt;- function(t, y, parms){\n    \n    beta  &lt;- parms[\"beta\"]\n    gamma &lt;- parms[\"gamma\"]\n    delta &lt;- parms[\"delta\"]\n\n    ??? &lt;- ???\n    ??? &lt;- ???\n    ??? &lt;- ???    \n        \n    return(???)\n    \n}\n\nnew_parms &lt;- ???\n\n\n\nB.2 Visualising for the whole population\nCalculate N(t) = S(t) + I(t) the total number of alive individuals. Make a plot of S(t), I(t), R(t) and N(t). Your function N(t) should be constant at 1 for all values of t. If this is not the case, ensure the model contains births of new S proportional to N, and deaths of each of S, I, and R.\n\ny_sir &lt;- cbind(y_sir, rowSums(y_sir))\npar(mfrow = c(2,2))\n\nfor (i in 1:ncol(y_sir)){\n\n    plot(y_sir[,i] ~ time_sir, type = \"p\", \n         xlab = \"Time (years)\")\n\n}\n\nB.2.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nB.2.(b) Approximately how long does it take for the susceptibles to go to 0?\n\n\nB.3 Discussion\nDiscuss what happens to the population of S, I, and R over time. Consider the parameters of the model, what they represent, and whether the assumptions they represent are realistic.\nSolutions to this practical can be accessed here."
  },
  {
    "objectID": "03_DiscreteDeterministic_solutions.html#a.-sir-model-from-lecture",
    "href": "03_DiscreteDeterministic_solutions.html#a.-sir-model-from-lecture",
    "title": "03. Discrete Time Deterministic Models: Solutions",
    "section": "A. SIR model from lecture",
    "text": "A. SIR model from lecture\n\nA.1 Implement the SIR model from the slides and lot the proportion of the population that is infectious.\nAnswer:\n\ntime_sir &lt;- seq(0, 20, by = 1)\ny_sir &lt;- matrix(data = NA,\n                nrow = length(time_sir),\n                ncol = 3)\n\nupdate_sir &lt;- function(t, y, parms){\n    beta  &lt;- parms[\"beta\"]\n    gamma &lt;- parms[\"gamma\"]\n    \n    out &lt;- c(-beta*y[1]*y[2],\n             beta*y[1]*y[2] - gamma*y[2],\n             + gamma*y[2])\n    \n    return(out)\n}\n\nparms_sir &lt;- c(beta = 1.3,\n               gamma = 0.23)\n\n# initial values at t=0\ny_sir[1, ] &lt;- c(0.99, 0.01, 0)\nfor (i in 2:nrow(y_sir)){\n    y_sir[i,] &lt;- y_sir[i-1,] +\n        update_sir(time_sir[i],\n                   y_sir[i-1, ],\n                   parms_sir)\n}\n\nplot(x = time_sir, y = y_sir[,2], ylim = c(0,1))\n\n\n\n\n\n\n\n\nA.1.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nAnswer: After approximately 7 days, the proportion infectious is 0.6.\nA.1.(b) Approximately how long does it take for the susceptibles to go to 0?\nAnswer: After 13 days, the proportion susceptible is below 0.001\n\n\nA.2 Change the mean time spent infectious from 4.35 days to 2 days, keeping the rate of transmission the same.\nA.2.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nAnswer: After 8 days, the proportion infectious is 0.3\nA.2.(b) Approximately how long does it take for the susceptibles to go to 0?\nAnswer: After 20 days, the proportion susceptible is still above 0.05\n\nparms_sir &lt;- c(beta = 1.3,\n               gamma = 1/2)\n\ny_sir[1, ] &lt;- c(0.99, 0.01, 0)\n\nfor (i in 2:nrow(y_sir)){\n    y_sir[i,] &lt;- y_sir[i-1,] +\n        update_sir(time_sir[i],\n                   y_sir[i-1, ],\n                   parms_sir)\n}\n\nplot(x = time_sir, y = y_sir[,2], ylim = c(0,1))\n\n\n\nA.3 Change the mean time spent infectious back to 4.35 days and set the transmission rate to be half what is has been\nA.3.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nAnswer: After 14 days, the proportion infectious is approximately 0.31\nA.3.(b) Approximately how long does it take for the susceptibles to go to 0?\nAnswer: Even after 20 days, the susceptible group is 0.1 of the population\n\nparms_sir &lt;- c(beta = 1.3/2,\n               gamma = 0.23)\n\ny_sir[1, ] &lt;- c(0.99, 0.01, 0)\n\nfor (i in 2:nrow(y_sir)){\n    y_sir[i,] &lt;- y_sir[i-1,] +\n        update_sir(time_sir[i],\n                   y_sir[i-1, ],\n                   parms_sir)\n}\n\nplot(x = time_sir, y = y_sir[,2], ylim = c(0,1))"
  },
  {
    "objectID": "about.html#who-you-are-scope-of-the-course",
    "href": "about.html#who-you-are-scope-of-the-course",
    "title": "About",
    "section": "Who you are (= scope of the course)",
    "text": "Who you are (= scope of the course)\nIndividuals with some exposure to the theory and use of infectious disease modelling & like to start coding their own models using R OR\nIndividuals who know some R but do not have experience using R to code infectious disease models OR\nIndividuals who will be conducting research using infectious disease models in R OR\nIndividuals who want a deeper understanding of techniques for implementing models."
  },
  {
    "objectID": "03_DiscreteDeterministic_practical.html#a.-sir-model-from-lecture",
    "href": "03_DiscreteDeterministic_practical.html#a.-sir-model-from-lecture",
    "title": "03. Discrete Time Deterministic Models: Practical",
    "section": "",
    "text": "time_sir &lt;- seq(0, 20, by = 1)\n\ny_sir &lt;- matrix(data = NA,\n                nrow = length(time_sir),\n                ncol = 3)\n\nupdate_sir &lt;- function(t, y, parms){\n    beta  &lt;- parms[\"beta\"]\n    gamma &lt;- parms[\"gamma\"]\n\n    out &lt;- ???\n\n    return(out)\n}\n\nparms_sir &lt;- c(beta = 1.3,\n               gamma = 0.23)\n\n# initial values at t=0\n\ny_sir[1, ] &lt;- c(???, ???, ???)\n\nfor (i in 2:nrow(y_sir)){\n    y_sir[i,] &lt;- ???\n}\n\nplot(x = time_sir, y = y_sir[,2])\n\nA.1.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nA.1.(b) Approximately how long does it take for the susceptibles to go to 0?\n\n\n\nA.2.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nA.2.(b) Approximately how long does it take for the susceptibles to go to 0?\n\nparms_sir &lt;- c(beta = ???,\n               gamma = ???)\n\ny_sir[1, ] &lt;- ???\n\nfor (i in 2:nrow(y_sir)){\n    y_sir[i,] &lt;- ???\n}\n\nplot(x = ???, y = ???, ylim = c(0,1))\n\n\n\n\nA.3.(a) At approximately what time does the peak in infectious population occur and what proportion of the population is infectious?\nA.3.(b) Approximately how long does it take for the susceptibles to go to 0?\n\nparms_sir &lt;- ???\n\ny_sir[1, ] &lt;- c(0.99, 0.01, 0)\n\nfor (i in 2:nrow(y_sir)){\n    y_sir[i,] &lt;- ???\n}\n\nplot(???)"
  },
  {
    "objectID": "06_SensitivitySampling.html",
    "href": "06_SensitivitySampling.html",
    "title": "06. Sensitivity Analysis & Sampling: Practical",
    "section": "",
    "text": "First, let’s run an ODE model. Download and open up the SIRmodel.R\n\n\nAnswer:\n\n\n\nAnswer:\n\n\n\nAnswer:\n# First let's clear our workspace, remove plots and load the libraries we need\n\nrm(list=ls())\n\ndev.off()\n\nlibrary(deSolve)\n\n# Let's read in these functions so we have them to hand\n\n&lt;YOUR CODE HERE&gt;\n\n# Let's choose a beta value of 0.4 and a gamma value of 0.2\n\nmax.prevalence &lt;- solveODE(parameters &lt;- c(beta = 0.4, gamma = 0.2))\n\nprint(max.prevalence)\n\n# Now let's look at the effect of the maximum prevalence of the epidemic across gamma = 0.1 -1.0 (increment on 0.1)\n\ngamma.vec &lt;- &lt;YOUR CODE HERE&gt;\n\n\n# initialise max/prevalence container\n\nmax.prevalence &lt;- vector()\n\n# Add in a loop to make this happen\n\n&lt;YOUR CODE HERE&gt;\n\nmp &lt;- solveODE(parameters = c(beta = 0.4, gamma = gamma.val),\n\nplot.all.results = FALSE)\n\nmax.prevalence &lt;- c(max.prevalence, mp)\n\n&lt;YOUR CODE HERE&gt;\n\n# Now we have our max.prevalence, we need to plot this against our infectiousness duration\n\n# plot max.prevalence as a function of the \\*infectiousness duration\\*\n\npar(new=FALSE)\n\npar(mfrow=c(1,1))\n\nplot(&lt;YOUR CODE HERE&gt; , &lt;YOUR CODE HERE&gt; , type = \"b\",\n\nxlab = \"Infectiousness Duration (days)\",\n\nylab = \"Maximum Prevalence\",\n\nmain= \"One-way uncertainty analysis\")\n\n# Now try to increase the resolution of gamma to get a better idea of the relationship\n\n# but remember to clear max.prevalence first!\n\n&lt;YOUR CODE HERE&gt;\n\n\n\nAnswer:"
  },
  {
    "objectID": "06_SensitivitySampling.html#one-way-sensitivity-analyses",
    "href": "06_SensitivitySampling.html#one-way-sensitivity-analyses",
    "title": "06. Sensitivity Analysis & Sampling: Practical",
    "section": "",
    "text": "First, let’s run an ODE model. Download and open up the SIRmodel.R\n\n\nAnswer:\n\n\n\nAnswer:\n\n\n\nAnswer:\n# First let's clear our workspace, remove plots and load the libraries we need\n\nrm(list=ls())\n\ndev.off()\n\nlibrary(deSolve)\n\n# Let's read in these functions so we have them to hand\n\n&lt;YOUR CODE HERE&gt;\n\n# Let's choose a beta value of 0.4 and a gamma value of 0.2\n\nmax.prevalence &lt;- solveODE(parameters &lt;- c(beta = 0.4, gamma = 0.2))\n\nprint(max.prevalence)\n\n# Now let's look at the effect of the maximum prevalence of the epidemic across gamma = 0.1 -1.0 (increment on 0.1)\n\ngamma.vec &lt;- &lt;YOUR CODE HERE&gt;\n\n\n# initialise max/prevalence container\n\nmax.prevalence &lt;- vector()\n\n# Add in a loop to make this happen\n\n&lt;YOUR CODE HERE&gt;\n\nmp &lt;- solveODE(parameters = c(beta = 0.4, gamma = gamma.val),\n\nplot.all.results = FALSE)\n\nmax.prevalence &lt;- c(max.prevalence, mp)\n\n&lt;YOUR CODE HERE&gt;\n\n# Now we have our max.prevalence, we need to plot this against our infectiousness duration\n\n# plot max.prevalence as a function of the \\*infectiousness duration\\*\n\npar(new=FALSE)\n\npar(mfrow=c(1,1))\n\nplot(&lt;YOUR CODE HERE&gt; , &lt;YOUR CODE HERE&gt; , type = \"b\",\n\nxlab = \"Infectiousness Duration (days)\",\n\nylab = \"Maximum Prevalence\",\n\nmain= \"One-way uncertainty analysis\")\n\n# Now try to increase the resolution of gamma to get a better idea of the relationship\n\n# but remember to clear max.prevalence first!\n\n&lt;YOUR CODE HERE&gt;\n\n\n\nAnswer:"
  },
  {
    "objectID": "about.html#who-we-are",
    "href": "about.html#who-we-are",
    "title": "About",
    "section": "",
    "text": "Your course organisers are Nicholas Davies and Yang Liu.\nYour course administrator is .\nOther lectures and demonstrators include ."
  },
  {
    "objectID": "06_SensitivitySampling.html#monte-carlo-sampling",
    "href": "06_SensitivitySampling.html#monte-carlo-sampling",
    "title": "06. Sensitivity Analysis & Sampling: Practical",
    "section": "(2) Monte Carlo Sampling",
    "text": "(2) Monte Carlo Sampling\nNow suppose that we have a previous epidemiological study that suggested that R0 has a mean value of 5, but uncertainty within the range of [-1, +1]. However, we still don’t know whether the infectiousness period is 1 day or 10 days. We will now use the functions in SIRmodel_R0.R to make a similar plot as above, but this time, incorporate the uncertainty of R0 for each discrete value of gamma. We’re going to first use a direct Monte Carlo Sampling method.\n# Read in our set of functions in SIRmodel_R0.R\n&lt;YOUR CODE HERE&gt;\n\n# First, let's set a fixed seed for the random number generator\n# this will allow us to run the code again and retrieve the same 'simulation'\nset.seed(2019)\n\n# Now, draw R0 1,000 times from a suitable distribution (e.g. normal)\nr0.all = &lt;YOUR CODE HERE&gt;\n\n# initialise max.prevalence again, this time it needs to be a dataframe \n# or a matrix\nsize.df = length(r0.all) * length(gamma.vec)\nmax.prevalence = data.frame(r0.value = vector(mode = \"numeric\", \n                                            length = size.df),\ngamma = vector(mode= \"numeric\", length = size.df),\nmax.prev = vector(mode= \"numeric\", length = size.df))\nindex = 0\n\n# create a loop over each of these R0 values in turn\n\nfor (r0.val in r0.all){\n# create a loop over each of these Gamma values in turn\nfor (gamma.val in gamma.vec){\n\n    index = index + 1\n    mp = solveODE_2(parameters = c(R0 = r0.val, gamma = gamma.val))\n    max.prevalence[index, \"r0.value\"] = r0.val\n    max.prevalence[index, \"gamma\"] = gamma.val\n    max.prevalence[index, \"max.prev\"] = mp\n    }\n}\n\n# Take a look at max.prevalence by using the 'head() function\nhead(max.prevalence)\n\n(e) How have we saved the output?\nAnswer:\nNow plot this output using the R function MCplot() in SIRmodel_R0.R\nMCplot(max.prevalence)\n\n\n(f) What conclusions can you draw from the plot?\nAnswer:"
  },
  {
    "objectID": "06_SensitivitySampling.html#lhs-vs-monte-carlo-sampling",
    "href": "06_SensitivitySampling.html#lhs-vs-monte-carlo-sampling",
    "title": "06. Sensitivity Analysis & Sampling: Practical",
    "section": "(3) LHS vs Monte Carlo Sampling",
    "text": "(3) LHS vs Monte Carlo Sampling\n# First let's load in the library we'll need for later\nlibrary(lhs)\n\n# We're going to first sample directly from a full distribution uniform \n# distribution from 0 to 1. How many samples will we need to take? \n# Let's try a few options and see how well they do\n\npar(mfrow=c(3,2))\nhist(rnorm(10))\nhist(rnorm(100))\nhist(rnorm(1000))\nhist(rnorm(10000))\nhist(rnorm(20000))\n\n# Now let's plot the sample sizes against the variance of the sample distribution\n\nplot(\n    c(10,100,1000,10000,50000,100000),\n    c(var(rnorm(10)), var(rnorm(100)), var(rnorm(1000)), var(rnorm(10000)), \n      var(rnorm(50000)), var(rnorm(100000))),\n    ylab = \"variance\", main = \"Variance of sampled normal\"\n    )\nabline(h = 1)\n\n# Let's now use 100 samples to see the difference between a Monte Carlo \n# sampling and a LHS sampling approach\n# Pick some small number of samples\nn &lt;- 100\n\n# First we're going to sample 100 times from a random sample\nmc_unif &lt;- runif(n)\n\n# 100 lh samples across 1 parameter\nlatin_unif &lt;- randomLHS(n, 1)\n\n# plot these two distribution\ndev.off()\npar(mfrow=c(3,2))\nhist(mc_unif)\nhist(latin_unif)\n\n# You can see how the Latin Hypercube does a great job of sampling evenly \n# across the distribution.\n# Let's now sample from a Normal distribution using a random monte carlo sample \n# across the whole distribution.\nmc_norm &lt;- rnorm(n, mean = 0, sd = 1)\n\n# How do we sample using an LHS? We use the previous numbers generated from the \n# uniform LHS to draw samples from the Normal using the Inverse Cumulative \n# Sampling\nlatin_norm &lt;- qnorm(latin_unif, mean = 0, sd = 1)\n\n# plot these two normal distributions\nhist(mc_norm)\nhist(latin_norm)\n\n# the latin hypercube sample looks much better! Why does this work?\n# first let's look at the norm probability distibution\nx &lt;- seq(-6,6, by =0.1) # random variable X\nnormdens &lt;- dnorm(x, mean = 0, sd = 1) # prob distribution, f(X)\nnormcumul &lt;- pnorm(x, mean = 0, sd = 1) # cumulative distribution, F(X)\n\nplot(x, normdens, \"l\")\nplot(x, normcumul, \"l\")\n\n# Most of the density is in the middle range of values (-1 to 1).\n\n# So we want a method to sample from this more often than the other areas in \n# the distribution. Specifically, we want to sample values from X proportionally \n# to the probability of those values occuring. Let's generate some samples \n# between 0-1. These can be values on our Y-axis. Then, if we ask what is the \n# value of the cumulative distribution that corresponds to these uniform \n# values we are taking the inverse for illustration let's just choose 10 points.\n\nex_latin &lt;- randomLHS(10, 1)\n\n# which X values are given by using these as the Y value (denoted by \"X\"s)?\n\nabline(h = ex_latin, col = \"red\")\npoints(qnorm(ex_latin, mean = 0, sd = 1), y=rep(0,10), pc = \"x\")\n\n# You can see that the samples are clustered around the middle: in areas of X \n# with higher density, the gradient of the cumluative distribution (F(X)) will \n# be very steep, causing more values between 0 and 1 to map to this range of X \n# with high density That is, F\\^{-1}(R) = X where R is a uniform random number \n# between 0 and 1.\n\n# So, you can sample from any distribution whose cumluative function is \n# 'invertable' by plugging in uniform random numbers to the inverse cumulative \n# function of your new distribution. For more information check out: \n# https://en.wikipedia.org/wiki/Inverse_transform_sampling\n\n# Likewise, to perform LHS on a uni- or mulitvariate non-uniform distribution, \n# we can transform our LHS samples from a uniform distribution as above."
  },
  {
    "objectID": "06_SensitivitySampling_practical.html",
    "href": "06_SensitivitySampling_practical.html",
    "title": "06. Sensitivity Analysis & Sampling: Practical",
    "section": "",
    "text": "First, let’s run an ODE model. Download and open up the SIRmodel.R\n\n\nAnswer:\n\n\n\nAnswer:\n\n\n\nAnswer:\n# First let's clear our workspace, remove plots and load the libraries we need\nrm(list=ls())\ndev.off()\nlibrary(deSolve)\n\n# Let's read in these functions so we have them to hand\n&lt;YOUR CODE HERE&gt;\n\n# Let's choose a beta value of 0.4 and a gamma value of 0.2\nmax.prevalence &lt;- solveODE(parameters &lt;- c(beta = 0.4, gamma = 0.2))\nprint(max.prevalence)\n\n# Now let's look at the effect of the maximum prevalence of the epidemic across \n# gamma = 0.1 -1.0 (increment on 0.1)\ngamma.vec &lt;- &lt;YOUR CODE HERE&gt;\n\n# initialise max/prevalence container\nmax.prevalence &lt;- vector()\n\n# Add in a loop to make this happen\n\n&lt;YOUR CODE HERE&gt;\n\nmp &lt;- solveODE(parameters = c(beta = 0.4, gamma = gamma.val),\nplot.all.results = FALSE)\nmax.prevalence &lt;- c(max.prevalence, mp)\n\n&lt;YOUR CODE HERE&gt;\n\n# Now we have our max.prevalence, we need to plot this against our \n# infectiousness duration - plot max.prevalence as a function of the \n# \\*infectiousness duration\\*\n\npar(new=FALSE)\npar(mfrow=c(1,1))\n\nplot(&lt;YOUR CODE HERE&gt;, \n     &lt;YOUR CODE HERE&gt;, \n     type = \"b\",\n     xlab = \"Infectiousness Duration (days)\",\n     ylab = \"Maximum Prevalence\",\n     main = \"One-way uncertainty analysis\")\n\n# Now try to increase the resolution of gamma to get a better idea of the \n# relationship but remember to clear max.prevalence first!\n\n&lt;YOUR CODE HERE&gt;\n\n\n\nAnswer:"
  },
  {
    "objectID": "06_SensitivitySampling_practical.html#one-way-sensitivity-analyses",
    "href": "06_SensitivitySampling_practical.html#one-way-sensitivity-analyses",
    "title": "06. Sensitivity Analysis & Sampling: Practical",
    "section": "",
    "text": "First, let’s run an ODE model. Download and open up the SIRmodel.R\n\n\nAnswer:\n\n\n\nAnswer:\n\n\n\nAnswer:\n# First let's clear our workspace, remove plots and load the libraries we need\nrm(list=ls())\ndev.off()\nlibrary(deSolve)\n\n# Let's read in these functions so we have them to hand\n&lt;YOUR CODE HERE&gt;\n\n# Let's choose a beta value of 0.4 and a gamma value of 0.2\nmax.prevalence &lt;- solveODE(parameters &lt;- c(beta = 0.4, gamma = 0.2))\nprint(max.prevalence)\n\n# Now let's look at the effect of the maximum prevalence of the epidemic across \n# gamma = 0.1 -1.0 (increment on 0.1)\ngamma.vec &lt;- &lt;YOUR CODE HERE&gt;\n\n# initialise max/prevalence container\nmax.prevalence &lt;- vector()\n\n# Add in a loop to make this happen\n\n&lt;YOUR CODE HERE&gt;\n\nmp &lt;- solveODE(parameters = c(beta = 0.4, gamma = gamma.val),\nplot.all.results = FALSE)\nmax.prevalence &lt;- c(max.prevalence, mp)\n\n&lt;YOUR CODE HERE&gt;\n\n# Now we have our max.prevalence, we need to plot this against our \n# infectiousness duration - plot max.prevalence as a function of the \n# \\*infectiousness duration\\*\n\npar(new=FALSE)\npar(mfrow=c(1,1))\n\nplot(&lt;YOUR CODE HERE&gt;, \n     &lt;YOUR CODE HERE&gt;, \n     type = \"b\",\n     xlab = \"Infectiousness Duration (days)\",\n     ylab = \"Maximum Prevalence\",\n     main = \"One-way uncertainty analysis\")\n\n# Now try to increase the resolution of gamma to get a better idea of the \n# relationship but remember to clear max.prevalence first!\n\n&lt;YOUR CODE HERE&gt;\n\n\n\nAnswer:"
  },
  {
    "objectID": "06_SensitivitySampling_practical.html#monte-carlo-sampling",
    "href": "06_SensitivitySampling_practical.html#monte-carlo-sampling",
    "title": "06. Sensitivity Analysis & Sampling: Practical",
    "section": "(2) Monte Carlo Sampling",
    "text": "(2) Monte Carlo Sampling\nNow suppose that we have a previous epidemiological study that suggested that R0 has a mean value of 5, but uncertainty within the range of [-1, +1]. However, we still don’t know whether the infectiousness period is 1 day or 10 days. We will now use the functions in SIRmodel_R0.R to make a similar plot as above, but this time, incorporate the uncertainty of R0 for each discrete value of gamma. We’re going to first use a direct Monte Carlo Sampling method.\n# Read in our set of functions in SIRmodel_R0.R\n&lt;YOUR CODE HERE&gt;\n\n# First, let's set a fixed seed for the random number generator\n# this will allow us to run the code again and retrieve the same 'simulation'\nset.seed(2019)\n\n# Now, draw R0 1,000 times from a suitable distribution (e.g. normal)\nr0.all = &lt;YOUR CODE HERE&gt;\n\n# initialise max.prevalence again, this time it needs to be a dataframe \n# or a matrix\nsize.df = length(r0.all) * length(gamma.vec)\nmax.prevalence = data.frame(r0.value = vector(mode = \"numeric\", \n                                            length = size.df),\ngamma = vector(mode= \"numeric\", length = size.df),\nmax.prev = vector(mode= \"numeric\", length = size.df))\nindex = 0\n\n# create a loop over each of these R0 values in turn\n\nfor (r0.val in r0.all){\n# create a loop over each of these Gamma values in turn\nfor (gamma.val in gamma.vec){\n\n    index = index + 1\n    mp = solveODE_2(parameters = c(R0 = r0.val, gamma = gamma.val))\n    max.prevalence[index, \"r0.value\"] = r0.val\n    max.prevalence[index, \"gamma\"] = gamma.val\n    max.prevalence[index, \"max.prev\"] = mp\n    }\n}\n\n# Take a look at max.prevalence by using the 'head() function\nhead(max.prevalence)\n\n(e) How have we saved the output?\nAnswer:\nNow plot this output using the R function MCplot() in SIRmodel_R0.R\nMCplot(max.prevalence)\n\n\n(f) What conclusions can you draw from the plot?\nAnswer:"
  },
  {
    "objectID": "06_SensitivitySampling_practical.html#lhs-vs-monte-carlo-sampling",
    "href": "06_SensitivitySampling_practical.html#lhs-vs-monte-carlo-sampling",
    "title": "06. Sensitivity Analysis & Sampling: Practical",
    "section": "(3) LHS vs Monte Carlo Sampling",
    "text": "(3) LHS vs Monte Carlo Sampling\n# First let's load in the library we'll need for later\nlibrary(lhs)\n\n# We're going to first sample directly from a full distribution uniform \n# distribution from 0 to 1. How many samples will we need to take? \n# Let's try a few options and see how well they do\n\npar(mfrow=c(3,2))\nhist(rnorm(10))\nhist(rnorm(100))\nhist(rnorm(1000))\nhist(rnorm(10000))\nhist(rnorm(20000))\n\n# Now let's plot the sample sizes against the variance of the sample distribution\n\nplot(\n    c(10,100,1000,10000,50000,100000),\n    c(var(rnorm(10)), var(rnorm(100)), var(rnorm(1000)), var(rnorm(10000)), \n      var(rnorm(50000)), var(rnorm(100000))),\n    ylab = \"variance\", main = \"Variance of sampled normal\"\n    )\nabline(h = 1)\n\n# Let's now use 100 samples to see the difference between a Monte Carlo \n# sampling and a LHS sampling approach\n# Pick some small number of samples\nn &lt;- 100\n\n# First we're going to sample 100 times from a random sample\nmc_unif &lt;- runif(n)\n\n# 100 lh samples across 1 parameter\nlatin_unif &lt;- randomLHS(n, 1)\n\n# plot these two distribution\ndev.off()\npar(mfrow=c(3,2))\nhist(mc_unif)\nhist(latin_unif)\n\n# You can see how the Latin Hypercube does a great job of sampling evenly \n# across the distribution.\n# Let's now sample from a Normal distribution using a random monte carlo sample \n# across the whole distribution.\nmc_norm &lt;- rnorm(n, mean = 0, sd = 1)\n\n# How do we sample using an LHS? We use the previous numbers generated from the \n# uniform LHS to draw samples from the Normal using the Inverse Cumulative \n# Sampling\nlatin_norm &lt;- qnorm(latin_unif, mean = 0, sd = 1)\n\n# plot these two normal distributions\nhist(mc_norm)\nhist(latin_norm)\n\n# the latin hypercube sample looks much better! Why does this work?\n# first let's look at the norm probability distibution\nx &lt;- seq(-6,6, by =0.1) # random variable X\nnormdens &lt;- dnorm(x, mean = 0, sd = 1) # prob distribution, f(X)\nnormcumul &lt;- pnorm(x, mean = 0, sd = 1) # cumulative distribution, F(X)\n\nplot(x, normdens, \"l\")\nplot(x, normcumul, \"l\")\n\n# Most of the density is in the middle range of values (-1 to 1).\n\n# So we want a method to sample from this more often than the other areas in \n# the distribution. Specifically, we want to sample values from X proportionally \n# to the probability of those values occuring. Let's generate some samples \n# between 0-1. These can be values on our Y-axis. Then, if we ask what is the \n# value of the cumulative distribution that corresponds to these uniform \n# values we are taking the inverse for illustration let's just choose 10 points.\n\nex_latin &lt;- randomLHS(10, 1)\n\n# which X values are given by using these as the Y value (denoted by \"X\"s)?\n\nabline(h = ex_latin, col = \"red\")\npoints(qnorm(ex_latin, mean = 0, sd = 1), y=rep(0,10), pc = \"x\")\n\n# You can see that the samples are clustered around the middle: in areas of X \n# with higher density, the gradient of the cumluative distribution (F(X)) will \n# be very steep, causing more values between 0 and 1 to map to this range of X \n# with high density That is, F\\^{-1}(R) = X where R is a uniform random number \n# between 0 and 1.\n\n# So, you can sample from any distribution whose cumluative function is \n# 'invertable' by plugging in uniform random numbers to the inverse cumulative \n# function of your new distribution. For more information check out: \n# https://en.wikipedia.org/wiki/Inverse_transform_sampling\n\n# Likewise, to perform LHS on a uni- or mulitvariate non-uniform distribution, \n# we can transform our LHS samples from a uniform distribution as above."
  }
]